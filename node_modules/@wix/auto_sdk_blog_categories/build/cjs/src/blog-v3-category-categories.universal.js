"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteCategory = exports.queryCategories = exports.listCategories = exports.getCategoryBySlug = exports.getCategory = exports.updateCategory = exports.createCategory = exports.WebhookIdentityType = exports.SortOrder = exports.Field = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixBlogV3Category = __importStar(require("./blog-v3-category-categories.http.js"));
// @ts-ignore
const image_1 = require("@wix/sdk-runtime/transformations/image");
const image_2 = require("@wix/sdk-runtime/transformations/image");
const page_url_1 = require("@wix/sdk-runtime/transformations/page-url");
const page_url_2 = require("@wix/sdk-runtime/transformations/page-url");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
var Field;
(function (Field) {
    Field["UNKNOWN"] = "UNKNOWN";
    /** Includes Category url. */
    Field["URL"] = "URL";
    /**
     * Includes internal id field.
     * Reserved for internal use
     */
    Field["INTERNAL_ID"] = "INTERNAL_ID";
    /** Includes SEO data. */
    Field["SEO"] = "SEO";
})(Field || (exports.Field = Field = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Creates a category.
 * @param category - Category info.
 * @public
 * @requiredField category
 * @requiredField category.label
 * @permissionId BLOG.CREATE-CATEGORY
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @returns Category info.
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.CreateCategory
 */
async function createCategory(category, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        category: category,
        fieldsets: options?.fieldsets,
    }), [
        {
            transformFn: page_url_1.transformSDKPageURLToRESTPageURL,
            paths: [
                { path: 'category.url' },
                { path: 'category.translations.url' },
            ],
        },
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [{ path: 'category.coverImage' }],
        },
    ]);
    const reqOpts = ambassadorWixBlogV3Category.createCategory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'category.url' },
                    { path: 'category.translations.url' },
                ],
            },
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [{ path: 'category.coverImage' }],
            },
        ]))?.category;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                category: '$[0]',
                fieldsets: '$[1].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['category', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createCategory = createCategory;
/**
 * Updates a category.
 * @param _id - Category ID.
 * @public
 * @requiredField _id
 * @requiredField category
 * @permissionId BLOG.EDIT-CATEGORY
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @returns Category info.
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.UpdateCategory
 */
async function updateCategory(_id, category, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        category: { ...category, id: _id },
        fieldsets: options?.fieldsets,
    }), [
        {
            transformFn: page_url_1.transformSDKPageURLToRESTPageURL,
            paths: [
                { path: 'category.url' },
                { path: 'category.translations.url' },
            ],
        },
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [{ path: 'category.coverImage' }],
        },
    ]);
    const reqOpts = ambassadorWixBlogV3Category.updateCategory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'category.url' },
                    { path: 'category.translations.url' },
                ],
            },
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [{ path: 'category.coverImage' }],
            },
        ]))?.category;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { category: '$[1]' },
            explicitPathsToArguments: {
                'category.id': '$[0]',
                fieldsets: '$[2].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'category', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateCategory = updateCategory;
/**
 * Gets a category with the specified ID.
 * @param categoryId - Category ID.
 * @public
 * @requiredField categoryId
 * @param options - Options specifying which fields to return.
 * @permissionId BLOG.READ-CATEGORY
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.GetCategory
 */
async function getCategory(categoryId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        categoryId: categoryId,
        fieldsets: options?.fieldsets,
    });
    const reqOpts = ambassadorWixBlogV3Category.getCategory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'category.url' },
                    { path: 'category.translations.url' },
                ],
            },
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [{ path: 'category.coverImage' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                categoryId: '$[0]',
                fieldsets: '$[1].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['categoryId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getCategory = getCategory;
/**
 * Gets a category with the specified slug.
 *
 * The slug is at the end of the URL of a specific category.
 * For example, if a category's URL is `https://example.com/blog/categories/famous-cats`, the slug is `famous-cats`.
 * The slug is a case-sensitive string that is derived from the category's label, unless specified otherwise.
 * @public
 * @requiredField slug
 * @param slug - Slug of the category to retrieve.
 *
 * The end of a category's URL. For example, `'https:/example.com/blog/category/{my-category-slug}'`. Case sensitive and generally based on the category `label` if not specified.
 * @param options - Options specifying which fields to return.
 * @permissionId BLOG.READ-CATEGORY
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.GetCategoryBySlug
 */
async function getCategoryBySlug(slug, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        slug: slug,
        fieldsets: options?.fieldsets,
        language: options?.language,
    });
    const reqOpts = ambassadorWixBlogV3Category.getCategoryBySlug(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'category.url' },
                    { path: 'category.translations.url' },
                ],
            },
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [{ path: 'category.coverImage' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                slug: '$[0]',
                fieldsets: '$[1].fieldsets',
                language: '$[1].language',
            },
            singleArgumentUnchanged: false,
        }, ['slug', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getCategoryBySlug = getCategoryBySlug;
/**
 * Retrieves a list of up to 100 categories per request.
 *
 * If you pass a language filter to the method, it returns a list of up to 100 categories in the requested language.
 *
 * The categoies are displayed in order of their `displayPosition`, starting with `0`. The `displayPosition` is the position in which the categories
 * are displayed in the Category Menu page. By default, categories get added to the bottom of the Category Menu page with a `displayPosition` of `-1`.
 *
 * List Categories runs with these defaults, which you can override:
 * - `paging.limit` is `50`.
 * - `paging.offset` is `0`.
 *
 * List Categories is sorted by `displayPosition` in descending order. This cannot be overridden.
 * @public
 * @param options - Filter and paging options.
 * @permissionId BLOG.READ-CATEGORY
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.ListCategories
 */
async function listCategories(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        paging: options?.paging,
        fieldsets: options?.fieldsets,
        language: options?.language,
    });
    const reqOpts = ambassadorWixBlogV3Category.listCategories(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'categories.url' },
                    { path: 'categories.translations.url' },
                ],
            },
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [{ path: 'categories.coverImage' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                paging: '$[0].paging',
                fieldsets: '$[0].fieldsets',
                language: '$[0].language',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listCategories = listCategories;
/**
 * Creates a query to retrieve a list of categories.
 *
 *
 * The Query Categories method builds a query to retrieve a list of up to 100 categories per language, and returns a [`CategoriesQueryBuilder`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/ascending) object.
 *
 * The response contains the query definition, which is typically used to run the query using the [`find()`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/find) method.
 *
 * You can refine the query by chaining `CategoriesQueryBuilder` methods to the query. `CategoriesQueryBuilder` methods enable you to sort, filter, and control the results that Query Categories returns. Any methods chained to the Query Categories method are applied in the order that they are called.
 *
 * Query Categories runs with these `CategoriesQueryBuilder` defaults, which you can override.
 * - [`limit(100)`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/limit)
 * - [`ascending(displayPosition)`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/ascending)
 *
 * The following `CategoriesQueryBuilder` methods are supported for Query Categories. For a full description of the `Categories` object, see the response for the [`items`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-result/items) property in [`CategoriesQueryResult`](https://www.wix.com/velo/reference/wix-blog-backend/categories/categoriesqueryresult).
 * @public
 * @param options - Options specifying which fields to return.
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @permissionId BLOG.READ-CATEGORY
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.QueryCategories
 */
function queryCategories(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixBlogV3Category.queryCategories({
                ...payload,
                ...(options ?? {}),
            });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(data, [
                {
                    transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                    paths: [
                        { path: 'categories.url' },
                        { path: 'categories.translations.url' },
                    ],
                },
                {
                    transformFn: image_2.transformRESTImageToSDKImage,
                    paths: [{ path: 'categories.coverImage' }],
                },
            ]));
            return {
                items: transformedData?.categories,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'OFFSET',
        transformationPaths: {},
    });
}
exports.queryCategories = queryCategories;
/**
 * Deletes a category.
 * @param categoryId - Category ID.
 * @public
 * @requiredField categoryId
 * @permissionId BLOG.DELETE-CATEGORY
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.DeleteCategory
 */
async function deleteCategory(categoryId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        categoryId: categoryId,
    });
    const reqOpts = ambassadorWixBlogV3Category.deleteCategory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { categoryId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['categoryId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteCategory = deleteCategory;
//# sourceMappingURL=blog-v3-category-categories.universal.js.map