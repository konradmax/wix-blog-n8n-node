import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { CategoriesQueryBuilder, Category, CategoryCreatedEnvelope, CategoryDeletedEnvelope, CategoryNonNullableFields, CategoryUpdatedEnvelope, CreateCategoryOptions, GetCategoryBySlugOptions, GetCategoryBySlugResponse, GetCategoryBySlugResponseNonNullableFields, GetCategoryOptions, GetCategoryResponse, GetCategoryResponseNonNullableFields, ListCategoriesOptions, ListCategoriesResponse, ListCategoriesResponseNonNullableFields, QueryCategoriesOptions, UpdateCategory, UpdateCategoryOptions } from './blog-v3-category-categories.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createCategory(httpClient: HttpClient): CreateCategorySignature;
interface CreateCategorySignature {
    /**
     * Creates a category.
     * @param - Category info.
     * @returns Category info.
     */
    (category: Category, options?: CreateCategoryOptions | undefined): Promise<Category & CategoryNonNullableFields>;
}
export declare function updateCategory(httpClient: HttpClient): UpdateCategorySignature;
interface UpdateCategorySignature {
    /**
     * Updates a category.
     * @param - Category ID.
     * @returns Category info.
     */
    (_id: string, category: UpdateCategory, options?: UpdateCategoryOptions | undefined): Promise<Category & CategoryNonNullableFields>;
}
export declare function getCategory(httpClient: HttpClient): GetCategorySignature;
interface GetCategorySignature {
    /**
     * Gets a category with the specified ID.
     * @param - Category ID.
     * @param - Options specifying which fields to return.
     */
    (categoryId: string, options?: GetCategoryOptions | undefined): Promise<GetCategoryResponse & GetCategoryResponseNonNullableFields>;
}
export declare function getCategoryBySlug(httpClient: HttpClient): GetCategoryBySlugSignature;
interface GetCategoryBySlugSignature {
    /**
     * Gets a category with the specified slug.
     *
     * The slug is at the end of the URL of a specific category.
     * For example, if a category's URL is `https://example.com/blog/categories/famous-cats`, the slug is `famous-cats`.
     * The slug is a case-sensitive string that is derived from the category's label, unless specified otherwise.
     * @param - Slug of the category to retrieve.
     *
     * The end of a category's URL. For example, `'https:/example.com/blog/category/{my-category-slug}'`. Case sensitive and generally based on the category `label` if not specified.
     * @param - Options specifying which fields to return.
     */
    (slug: string, options?: GetCategoryBySlugOptions | undefined): Promise<GetCategoryBySlugResponse & GetCategoryBySlugResponseNonNullableFields>;
}
export declare function listCategories(httpClient: HttpClient): ListCategoriesSignature;
interface ListCategoriesSignature {
    /**
     * Retrieves a list of up to 100 categories per request.
     *
     * If you pass a language filter to the method, it returns a list of up to 100 categories in the requested language.
     *
     * The categoies are displayed in order of their `displayPosition`, starting with `0`. The `displayPosition` is the position in which the categories
     * are displayed in the Category Menu page. By default, categories get added to the bottom of the Category Menu page with a `displayPosition` of `-1`.
     *
     * List Categories runs with these defaults, which you can override:
     * - `paging.limit` is `50`.
     * - `paging.offset` is `0`.
     *
     * List Categories is sorted by `displayPosition` in descending order. This cannot be overridden.
     * @param - Filter and paging options.
     */
    (options?: ListCategoriesOptions | undefined): Promise<ListCategoriesResponse & ListCategoriesResponseNonNullableFields>;
}
export declare function queryCategories(httpClient: HttpClient): QueryCategoriesSignature;
interface QueryCategoriesSignature {
    /**
     * Creates a query to retrieve a list of categories.
     *
     *
     * The Query Categories method builds a query to retrieve a list of up to 100 categories per language, and returns a [`CategoriesQueryBuilder`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/ascending) object.
     *
     * The response contains the query definition, which is typically used to run the query using the [`find()`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/find) method.
     *
     * You can refine the query by chaining `CategoriesQueryBuilder` methods to the query. `CategoriesQueryBuilder` methods enable you to sort, filter, and control the results that Query Categories returns. Any methods chained to the Query Categories method are applied in the order that they are called.
     *
     * Query Categories runs with these `CategoriesQueryBuilder` defaults, which you can override.
     * - [`limit(100)`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/limit)
     * - [`ascending(displayPosition)`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/ascending)
     *
     * The following `CategoriesQueryBuilder` methods are supported for Query Categories. For a full description of the `Categories` object, see the response for the [`items`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-result/items) property in [`CategoriesQueryResult`](https://www.wix.com/velo/reference/wix-blog-backend/categories/categoriesqueryresult).
     * @param - Options specifying which fields to return.
     */
    (options?: QueryCategoriesOptions | undefined): CategoriesQueryBuilder;
}
export declare function deleteCategory(httpClient: HttpClient): DeleteCategorySignature;
interface DeleteCategorySignature {
    /**
     * Deletes a category.
     * @param - Category ID.
     */
    (categoryId: string): Promise<void>;
}
export declare const onCategoryCreated: EventDefinition<CategoryCreatedEnvelope, "wix.blog.v3.category_created">;
export declare const onCategoryDeleted: EventDefinition<CategoryDeletedEnvelope, "wix.blog.v3.category_deleted">;
export declare const onCategoryUpdated: EventDefinition<CategoryUpdatedEnvelope, "wix.blog.v3.category_updated">;
export { ActionEvent, ApplicationError, BaseEventMetadata, BlogPaging, BulkActionMetadata, BulkCategoryResult, BulkCreateCategoriesRequest, BulkCreateCategoriesResponse, BulkDeleteCategoryRequest, BulkDeleteCategoryResponse, BulkUpdateCategoriesRequest, BulkUpdateCategoriesResponse, CategoriesQueryBuilder, CategoriesQueryResult, Category, CategoryCreatedEnvelope, CategoryDeletedEnvelope, CategoryLanguageCount, CategoryNonNullableFields, CategoryTranslation, CategoryUpdatedEnvelope, CreateCategoryOptions, CreateCategoryRequest, CreateCategoryResponse, CreateCategoryResponseNonNullableFields, CursorPaging, Cursors, DeleteCategoryRequest, DeleteCategoryResponse, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, Field, FocalPoint, GetCategoriesCountByLanguageRequest, GetCategoriesCountByLanguageResponse, GetCategoryBySlugOptions, GetCategoryBySlugRequest, GetCategoryBySlugResponse, GetCategoryBySlugResponseNonNullableFields, GetCategoryOptions, GetCategoryRequest, GetCategoryResponse, GetCategoryResponseNonNullableFields, IdentificationData, IdentificationDataIdOneOf, InitialCategoriesCopied, ItemMetadata, Keyword, ListCategoriesOptions, ListCategoriesRequest, ListCategoriesResponse, ListCategoriesResponseNonNullableFields, MaskedCategory, MessageEnvelope, MetaData, Paging, PagingMetadataV2, PlatformQuery, PlatformQueryPagingMethodOneOf, QueryCategoriesOptions, QueryCategoriesRequest, QueryCategoriesResponse, QueryCategoriesResponseNonNullableFields, RestoreInfo, SeoSchema, Settings, SortOrder, Sorting, Tag, UpdateCategory, UpdateCategoryOptions, UpdateCategoryRequest, UpdateCategoryResponse, UpdateCategoryResponseNonNullableFields, WebhookIdentityType, } from './blog-v3-category-categories.universal.js';
