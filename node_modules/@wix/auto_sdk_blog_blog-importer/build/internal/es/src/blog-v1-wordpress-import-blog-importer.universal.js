import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixBlogV1WordpressImport from './blog-v1-wordpress-import-blog-importer.http.js';
export var Status;
(function (Status) {
    Status["UNKNOWN"] = "UNKNOWN";
    Status["READY_TO_IMPORT"] = "READY_TO_IMPORT";
    Status["STARTED"] = "STARTED";
    Status["FAILED"] = "FAILED";
    Status["DONE"] = "DONE";
    Status["PARSING_URL"] = "PARSING_URL";
    Status["NOT_FOUND"] = "NOT_FOUND";
})(Status || (Status = {}));
/**
 * Starts wordpress import process.
 * @public
 * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES
 * @fqn com.wix.blog.WordpressImportService.StartImport
 */
export async function startImport(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        shouldPublish: options?.shouldPublish,
    });
    const reqOpts = ambassadorWixBlogV1WordpressImport.startImport(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { shouldPublish: '$[0].shouldPublish' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Submits wordpress import process from URL.
 * It will prepare wordpress data for import from the given URL.
 * Use "GetImportStatus" to get the status of the import process.
 * Once the import status becomes READY_TO_IMPORT, the import process can be started by invoking "StartImport".
 * @param url - Url to wordpress xml file.
 * @public
 * @requiredField url
 * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES
 * @fqn com.wix.blog.WordpressImportService.SubmitUrlForImport
 */
export async function submitUrlForImport(url, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        url: url,
        siteDomain: options?.siteDomain,
    });
    const reqOpts = ambassadorWixBlogV1WordpressImport.submitUrlForImport(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                url: '$[0]',
                siteDomain: '$[1].siteDomain',
            },
            singleArgumentUnchanged: false,
        }, ['url', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/** @param url - Url for wordpress site.
 * @public
 * @requiredField url
 * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES
 * @fqn com.wix.blog.WordpressImportService.ValidateUrlForImport
 */
export async function validateUrlForImport(url) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ url: url });
    const reqOpts = ambassadorWixBlogV1WordpressImport.validateUrlForImport(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { url: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['url']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/** @public
 * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES
 * @fqn com.wix.blog.WordpressImportService.DeleteNotImported
 */
export async function deleteNotImported() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixBlogV1WordpressImport.deleteNotImported(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Gets the status of the import process.
 * @public
 * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES
 * @fqn com.wix.blog.WordpressImportService.GetImportStatus
 */
export async function getImportStatus() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixBlogV1WordpressImport.getImportStatus(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Gets the posts that were not yet imported either because of an error or because import is still in progress.
 * @public
 * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES
 * @fqn com.wix.blog.WordpressImportService.GetNotImportedPosts
 */
export async function getNotImportedPosts() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixBlogV1WordpressImport.getNotImportedPosts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=blog-v1-wordpress-import-blog-importer.universal.js.map