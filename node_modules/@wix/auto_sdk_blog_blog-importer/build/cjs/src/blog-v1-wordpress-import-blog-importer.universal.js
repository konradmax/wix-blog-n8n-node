"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNotImportedPosts = exports.getImportStatus = exports.deleteNotImported = exports.validateUrlForImport = exports.submitUrlForImport = exports.startImport = exports.Status = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixBlogV1WordpressImport = __importStar(require("./blog-v1-wordpress-import-blog-importer.http.js"));
var Status;
(function (Status) {
    Status["UNKNOWN"] = "UNKNOWN";
    Status["READY_TO_IMPORT"] = "READY_TO_IMPORT";
    Status["STARTED"] = "STARTED";
    Status["FAILED"] = "FAILED";
    Status["DONE"] = "DONE";
    Status["PARSING_URL"] = "PARSING_URL";
    Status["NOT_FOUND"] = "NOT_FOUND";
})(Status || (exports.Status = Status = {}));
/**
 * Starts wordpress import process.
 * @public
 * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES
 * @fqn com.wix.blog.WordpressImportService.StartImport
 */
async function startImport(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        shouldPublish: options?.shouldPublish,
    });
    const reqOpts = ambassadorWixBlogV1WordpressImport.startImport(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { shouldPublish: '$[0].shouldPublish' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.startImport = startImport;
/**
 * Submits wordpress import process from URL.
 * It will prepare wordpress data for import from the given URL.
 * Use "GetImportStatus" to get the status of the import process.
 * Once the import status becomes READY_TO_IMPORT, the import process can be started by invoking "StartImport".
 * @param url - Url to wordpress xml file.
 * @public
 * @requiredField url
 * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES
 * @fqn com.wix.blog.WordpressImportService.SubmitUrlForImport
 */
async function submitUrlForImport(url, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        url: url,
        siteDomain: options?.siteDomain,
    });
    const reqOpts = ambassadorWixBlogV1WordpressImport.submitUrlForImport(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                url: '$[0]',
                siteDomain: '$[1].siteDomain',
            },
            singleArgumentUnchanged: false,
        }, ['url', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.submitUrlForImport = submitUrlForImport;
/** @param url - Url for wordpress site.
 * @public
 * @requiredField url
 * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES
 * @fqn com.wix.blog.WordpressImportService.ValidateUrlForImport
 */
async function validateUrlForImport(url) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ url: url });
    const reqOpts = ambassadorWixBlogV1WordpressImport.validateUrlForImport(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { url: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['url']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.validateUrlForImport = validateUrlForImport;
/** @public
 * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES
 * @fqn com.wix.blog.WordpressImportService.DeleteNotImported
 */
async function deleteNotImported() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({});
    const reqOpts = ambassadorWixBlogV1WordpressImport.deleteNotImported(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteNotImported = deleteNotImported;
/**
 * Gets the status of the import process.
 * @public
 * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES
 * @fqn com.wix.blog.WordpressImportService.GetImportStatus
 */
async function getImportStatus() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({});
    const reqOpts = ambassadorWixBlogV1WordpressImport.getImportStatus(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getImportStatus = getImportStatus;
/**
 * Gets the posts that were not yet imported either because of an error or because import is still in progress.
 * @public
 * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES
 * @fqn com.wix.blog.WordpressImportService.GetNotImportedPosts
 */
async function getNotImportedPosts() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({});
    const reqOpts = ambassadorWixBlogV1WordpressImport.getNotImportedPosts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getNotImportedPosts = getNotImportedPosts;
//# sourceMappingURL=blog-v1-wordpress-import-blog-importer.universal.js.map