import { biHeaderGenerator } from '../bi/biHeaderGenerator.js';
import { DEFAULT_API_URL } from '../common.js';
import { createAccessToken, isTokenExpired } from '../tokenHelpers.js';
import { TokenRole } from './oauth2/types.js';
export function SiteSessionAuth(config) {
    const _tokens = config.tokens || {
        accessToken: { value: '', expiresAt: 0 },
        refreshToken: { value: '', role: TokenRole.NONE },
    };
    const setTokens = (tokens) => {
        _tokens.accessToken = tokens.accessToken;
        _tokens.refreshToken = tokens.refreshToken;
    };
    const getAuthHeaders = async () => {
        if (!_tokens.accessToken?.value || isTokenExpired(_tokens.accessToken)) {
            const tokens = await generateVisitorTokens({
                refreshToken: _tokens.refreshToken,
            });
            setTokens(tokens);
        }
        return Promise.resolve({
            headers: { Authorization: _tokens.accessToken.value },
        });
    };
    const generateVisitorTokens = async (tokens) => {
        if (tokens?.accessToken?.value &&
            tokens?.refreshToken?.value &&
            !isTokenExpired(tokens.accessToken)) {
            return tokens;
        }
        if (tokens?.refreshToken?.value) {
            try {
                const newTokens = await renewToken(tokens.refreshToken);
                return newTokens;
            }
            catch (e) {
                // just continue and create a visitor one
            }
        }
        const tokensResponse = await fetchTokens({
            clientId: config.clientId,
            grantType: 'anonymous',
        });
        return {
            accessToken: createAccessToken(tokensResponse.access_token, tokensResponse.expires_in),
            refreshToken: {
                value: tokensResponse.refresh_token,
                role: TokenRole.VISITOR,
            },
        };
    };
    const renewToken = async (refreshToken) => {
        const tokensResponse = await fetchTokens({
            refreshToken: refreshToken.value,
            grantType: 'refresh_token',
        });
        const accessToken = createAccessToken(tokensResponse.access_token, tokensResponse.expires_in);
        return {
            accessToken,
            refreshToken,
        };
    };
    return {
        generateVisitorTokens,
        renewToken,
        getAuthHeaders,
        setTokens,
        getTokens: () => _tokens,
    };
}
const fetchTokens = async (payload, headers = {}) => {
    const res = await fetch(`https://${DEFAULT_API_URL}/oauth2/token`, {
        method: 'POST',
        body: JSON.stringify(payload),
        headers: {
            ...biHeaderGenerator({
                entityFqdn: 'wix.identity.oauth.v1.refresh_token',
                methodFqn: 'wix.identity.oauth2.v1.Oauth2Ng.Token',
                packageName: '@wix/sdk',
            }),
            'Content-Type': 'application/json',
            ...headers,
        },
    });
    if (res.status !== 200) {
        let responseJson;
        try {
            responseJson = await res.json();
        }
        catch { }
        throw new Error(`Failed to fetch tokens from OAuth API: ${res.statusText}. request id: ${res.headers.get('x-request-id')}. ${responseJson ? `Response: ${JSON.stringify(responseJson)}` : ''}`);
    }
    const json = await res.json();
    return json;
};
