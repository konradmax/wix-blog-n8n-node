export interface BlogTag {
    /**
     * Tag ID.
     * @readonly
     */
    id?: string;
    /**
     * Tag label.
     *
     * A blog can't have two tags with the same label.
     */
    label?: string;
    /** Tag slug. For example, `'tag-slug'`. */
    slug?: string;
    /**
     * Date the tag was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date the tag was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Number of posts with this tag, including unpublished draft posts.
     * @readonly
     */
    postCount?: number;
    /**
     * Tag URL.
     * @readonly
     */
    url?: PageUrl;
    /**
     * Number of published posts with this tag.
     * @readonly
     */
    publishedPostCount?: number;
    /**
     * ID of the tag translations.
     *
     * All translations of a single tag share the same `translationId`.
     * @readonly
     */
    translationId?: string | null;
    /**
     * Tag language.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     */
    language?: string | null;
}
export interface PageUrl {
    /** The base URL. For premium sites, this is the domain. For free sites, this is the site URL. For example, `mysite.wixsite.com/mysite`. */
    base?: string;
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    path?: string;
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
export interface SeoSchema {
    /** SEO tag information. */
    tags?: Tag[];
    /** SEO general settings. */
    settings?: Settings;
}
export interface Keyword {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /** The source that added the keyword terms to the SEO settings. */
    origin?: string | null;
}
export interface Tag {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{"key": "value"}` pair object where each SEO tag property (`"name"`, `"content"`, `"rel"`, `"href"`) contains a value.
     * For example: `{"name": "description", "content": "the description itself"}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{"height": 300, "width": 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
export interface Settings {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /** User-selected keyword terms for a specific page. */
    keywords?: Keyword[];
}
export interface InitialTagsCopied {
    /** Number of tags copied. */
    count?: number;
}
export interface GetOrCreateTagRequest {
    /** Tag name. Unique per blog. */
    label?: string;
    /** Tag language. */
    language?: string | null;
    /**
     * List of tag fields to be included if entities are present in the response.
     * Base fieldset, which is default, will return all core tag properties.
     * Example: When URL fieldset is selected, returned tag will have a set of base properties and tag url.
     */
    fieldsets?: Field[];
}
export declare enum Field {
    UNKNOWN = "UNKNOWN",
    /** Includes Tag URL when present. */
    URL = "URL"
}
export interface GetOrCreateTagResponse {
    /** Tag info. */
    tag?: BlogTag;
}
export interface CreateTagRequest {
    /** Tag label. The label for each tag in a blog must be unique. */
    label: string;
    /**
     * Tag language.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     */
    language?: string | null;
    /** Preferred tag slug. For example, `'tag-slug'`. */
    slug?: string | null;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     */
    fieldsets?: Field[];
}
export interface CreateTagResponse {
    /** Tag info. */
    tag?: BlogTag;
}
export interface UpdateTagRequest {
    /** Tag info. */
    tag?: BlogTag;
    /**
     * List of tag fields to be included if entities are present in the response.
     * Base fieldset, which is default, will return all core tag properties.
     * Example: When URL fieldset is selected, returned tag will have a set of base properties and tag url.
     */
    fieldsets?: Field[];
}
export interface UpdateTagResponse {
    /** Tag info. */
    tag?: BlogTag;
}
export interface BulkCreateTagsRequest {
    /** Tags to create. */
    tags?: BlogTag[];
    /** Whether to return the full created tag entities in the response. */
    returnFullEntity?: boolean;
    /**
     * List of tag fields to be included if entities are present in the response.
     * Base fieldset, which is default, will return all core tag properties.
     * Example: When URL fieldset is selected, returned tag will have a set of base properties and tag url.
     */
    fieldsets?: Field[];
}
export interface BulkCreateTagsResponse {
    /** Tags created by bulk action. */
    results?: BulkTagResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkTagResult {
    /** Bulk actions metadata for tag. */
    itemMetadata?: ItemMetadata;
    /** Optional created tag. */
    item?: BlogTag;
}
export interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
export interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
export interface GetTagsCountByLanguageRequest {
}
export interface GetTagsCountByLanguageResponse {
    /** The language and it's count. */
    tagsLanguageCount?: TagLanguageCount[];
}
export interface TagLanguageCount {
    /** 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format. */
    languageCode?: string | null;
    /** The count of tags for the language. */
    tagCount?: number | null;
}
export interface GetTagByLabelRequest {
    /** Tag label. */
    label: string;
    /**
     * Tag language.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * If omitted, tags in all languages are returned.
     */
    language?: string | null;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     */
    fieldsets?: Field[];
}
export interface GetTagByLabelResponse {
    /** Tag info. */
    tag?: BlogTag;
}
export interface GetTagRequest {
    /** Tag ID. */
    tagId: string;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     */
    fieldsets?: Field[];
}
export interface GetTagResponse {
    /** Tag info. */
    tag?: BlogTag;
}
export interface GetTagBySlugRequest {
    /** Slug of the tag to retrieve. */
    slug: string;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     */
    fieldsets?: Field[];
    /**
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * Language of the tag to retrieve.
     */
    language?: string | null;
}
export interface GetTagBySlugResponse {
    /** Tag info. */
    tag?: BlogTag;
}
export interface QueryTagsRequest {
    /** Query options. */
    query?: PlatformQuery;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     */
    fieldsets?: Field[];
}
export interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: CommonPaging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
export interface PlatformQueryPagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: CommonPaging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CommonPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface CommonCursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface QueryTagsResponse {
    /** List of tags. */
    tags?: BlogTag[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PagingMetadataV2;
}
export interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
export interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
export interface ListTagsRequest extends ListTagsRequestPagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `sort`. */
    cursorPaging?: CursorPaging;
    /** Sorting options. For a list of sortable fields, see [Field Support for Filtering and Sorting](https://dev.wix.com/api/rest/community/blog/filter-and-sort). */
    sort?: Sorting[];
    /**
     * List of tag fields to be included if entities are present in the response.
     * Base fieldset, which is default, will return all core tag properties.
     * Example: When URL fieldset is selected, returned tag will have a set of base properties and tag url.
     */
    fieldsets?: Field[];
}
/** @oneof */
export interface ListTagsRequestPagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface ListTagsResponse {
    /** List of tags. */
    tags?: BlogTag[];
    /** Details on the paged set of results returned. */
    metaData?: MetaData;
}
export interface MetaData {
    /** Number of items returned in this response. */
    count?: number;
    /** Requested offset. */
    offset?: number;
    /** Total number of items that match the query. */
    total?: number;
    /** Pointer to the next or previous page in the list of results. */
    cursor?: string | null;
}
export interface BulkDeleteTagRequest {
    /** Tag IDs. */
    tagIds?: string[];
    /** Should delete bypassing the trash-bin. */
    permanent?: boolean;
}
export interface BulkDeleteTagResponse {
}
export interface DeleteTagRequest {
    /** Tag ID. */
    tagId: string;
}
export interface DeleteTagResponse {
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
    /** Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity */
    restoreInfo?: RestoreInfo;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface PageUrlNonNullableFields {
    base: string;
    path: string;
}
interface TagNonNullableFields {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields[];
}
interface SeoSchemaNonNullableFields {
    tags: TagNonNullableFields[];
    settings?: SettingsNonNullableFields;
}
interface BlogTagNonNullableFields {
    id: string;
    label: string;
    slug: string;
    postCount: number;
    url?: PageUrlNonNullableFields;
    publishedPostCount: number;
    seoData?: SeoSchemaNonNullableFields;
}
export interface CreateTagResponseNonNullableFields {
    tag?: BlogTagNonNullableFields;
}
export interface GetTagByLabelResponseNonNullableFields {
    tag?: BlogTagNonNullableFields;
}
export interface GetTagResponseNonNullableFields {
    tag?: BlogTagNonNullableFields;
}
export interface GetTagBySlugResponseNonNullableFields {
    tag?: BlogTagNonNullableFields;
}
export interface QueryTagsResponseNonNullableFields {
    tags: BlogTagNonNullableFields[];
}
export {};
