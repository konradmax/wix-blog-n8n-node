export interface Post {
    /**
     * Post ID.
     * @readonly
     */
    _id?: string;
    /** Post title. */
    title?: string;
    /**
     * Post excerpt.
     * Can be selected by a site contributor. By default, it is extracted from the content text's first characters.
     *
     * Max: 500 characters
     */
    excerpt?: string;
    /**
     * The post's content in plain text.
     * @readonly
     */
    contentText?: string | null;
    /** Date the post was first published. */
    firstPublishedDate?: Date | null;
    /**
     * Date the post was last published.
     * @readonly
     */
    lastPublishedDate?: Date | null;
    /** Post URL. */
    url?: string;
    /**
     * Part of a post's URL that refers to a specific post.
     *
     *
     * For example, `'https:/example.com/posts/my-post-slug'`.
     *
     */
    slug?: string;
    /** Whether the post is marked as featured. */
    featured?: boolean;
    /** Whether the post is pinned. If `true`, the post is placed at the top of the post list. */
    pinned?: boolean;
    /**
     * [Category IDs](https://www.wix.com/velo/reference/wix-blog-backend/categories) of the post.
     *
     */
    categoryIds?: string[];
    /**
     * Reserved for internal use.
     * @deprecated
     * @replacedBy media
     * @targetRemovalDate 2024-06-30
     */
    coverMedia?: CoverMedia;
    /**
     * Post owner's [member ID](https://www.wix.com/velo/reference/wix-members-backend).
     *
     */
    memberId?: string;
    /**
     * Hashtags in the post.
     * @readonly
     */
    hashtags?: string[];
    /** Whether commenting on the post is enabled. */
    commentingEnabled?: boolean;
    /** Estimated reading time. */
    minutesToRead?: number;
    /** Image placed at the top of the blog page. Only displays on mobile devices.  */
    heroImage?: string;
    /**
     * IDs of [tags](https://www.wix.com/velo/reference/wix-blog-backend/tags) the post is tagged with.
     *
     * @readonly
     */
    tagIds?: string[];
    /**
     * IDs of posts related to the post.
     * @readonly
     */
    relatedPostIds?: string[];
    /**
     * Pricing plan IDs.
     *
     *
     * If a post is assigned to a specific pricing plan.
     * @readonly
     */
    pricingPlanIds?: string[];
    /** ID of the post's translations when [Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-translating-your-blog) is installed on a site. All translations of a single post will share the same `translationId`. */
    translationId?: string | null;
    /**
     * Language the post is written in.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     */
    language?: string | null;
    /** SEO data. */
    seoData?: SeoSchema;
    /**
     * Reserved for internal use.
     * @readonly
     */
    content?: string | null;
    /**
     * Post owner's [contact ID](https://www.wix.com/velo/reference/wix-crm-backend/contacts).
     *
     */
    contactId?: string | null;
    /**
     * Post rich content
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="image.gallery.video.audio.divider.linkButton.html.giphy.codeBlock.file.hashtag.lineSpacing.indent.link.textColor.textHighlight.heading.verticalEmbed.table.collapsibleList.poll" exampleid="72c23a25-524f-4f70-a260-4a2777b6f5d5">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     * @readonly
     */
    richContent?: RichContent;
    /**
     * Whether the returned content is a preview of premium content. Defaults to `false`.
     * A preview displays a limited number of paragraphs of paid content to non-subscribed users.
     * @readonly
     */
    preview?: boolean;
    /** Reserved for internal use. */
    contentId?: string | null;
    /**
     * Reserved for internal use.
     * @readonly
     */
    mostRecentContributorId?: string | null;
    /**
     * Post moderation details.
     *
     *
     * Only relevant to posts submitted by [guest writers](https://support.wix.com/en/article/wix-blog-moderating-blog-posts-from-your-guest-writers). Guest writers have the ability to write posts but not publish them. These posts can be rejected or approved for publishing by a blog editor or site owner.
     * @readonly
     */
    moderationDetails?: ModerationDetails;
    /** Post cover media. */
    media?: Media;
    /**
     * Post rich content as a string
     * @internal
     * @readonly
     */
    richContentString?: string | null;
    /**
     * Indicates if there is a draft post with changes that have not yet been published.
     * @readonly
     */
    hasUnpublishedChanges?: boolean;
    /**
     * Post reference ID. You can reference the post from other entities, for example, comments.
     * @readonly
     */
    referenceId?: string | null;
}
export interface CoverMedia extends CoverMediaMediaOneOf {
    /** Image url. */
    image?: string;
    /** Video url. */
    video?: string;
    /**
     * Is cover media enabled.
     * Selected by user whether to display cover media on the feed
     * @deprecated Is cover media enabled.
     * Selected by user whether to display cover media on the feed
     * @replacedBy displayed
     * @targetRemovalDate 2024-06-30
     */
    enabled?: boolean;
    /** Whether cover media is displayed. */
    displayed?: boolean;
    /**
     * Whether the cover media is custom.
     *
     * `false` if the cover media is the first image or video in the post. `true` if set to some other image or video.
     */
    custom?: boolean;
    /** Media alternative text. */
    altText?: string | null;
}
/** @oneof */
export interface CoverMediaMediaOneOf {
    /** Image url. */
    image?: string;
    /** Video url. */
    video?: string;
}
export interface FocalPoint {
    /** X-coordinate of the focal point. */
    x?: number;
    /** Y-coordinate of the focal point. */
    y?: number;
    /** crop by height */
    height?: number | null;
    /** crop by width */
    width?: number | null;
}
export interface PostCountInfo {
    /**
     * Total number of post comments
     * @readonly
     */
    comments?: number;
    /**
     * Total number of post likes
     * @readonly
     */
    likes?: number;
    /**
     * Total number of post views
     * @readonly
     */
    views?: number;
}
export interface Metrics {
    /**
     * Total number of post comments.
     * @readonly
     */
    comments?: number;
    /**
     * Total number of post likes.
     * @readonly
     */
    likes?: number;
    /**
     * Total number of post views.
     * @readonly
     */
    views?: number;
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
export interface SeoSchema {
    /** SEO tag information. */
    tags?: Tag[];
    /** SEO general settings. */
    settings?: Settings;
}
export interface Keyword {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /** The source that added the keyword terms to the SEO settings. */
    origin?: string | null;
}
export interface Tag {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{"key": "value"}` pair object where each SEO tag property (`"name"`, `"content"`, `"rel"`, `"href"`) contains a value.
     * For example: `{"name": "description", "content": "the description itself"}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{"height": 300, "width": 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
export interface Settings {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /** User-selected keyword terms for a specific page. */
    keywords?: Keyword[];
}
export interface RichContent {
    /** Node objects representing a rich content document. */
    nodes?: Node[];
    /** Object metadata. */
    metadata?: Metadata;
    /** Global styling for header, paragraph, block quote, and code block nodes in the object. */
    documentStyle?: DocumentStyle;
}
export interface Node extends NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** @deprecated */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
    /** LayoutData layout_data = 31; // Data for a layout node. Reserved for future use. */
    layoutCellData?: LayoutCellData;
    /** Node type. Use `APP_EMBED` for nodes that embed content from other Wix apps. Use `EMBED` to embed content in [oEmbed](https://oembed.com/) format. */
    type?: NodeType;
    /** Node ID. */
    _id?: string;
    /** A list of child nodes. */
    nodes?: Node[];
    /** Padding and background color styling for the node. */
    style?: NodeStyle;
}
/** @oneof */
export interface NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** @deprecated */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
    /** LayoutData layout_data = 31; // Data for a layout node. Reserved for future use. */
    layoutCellData?: LayoutCellData;
}
export declare enum NodeType {
    PARAGRAPH = "PARAGRAPH",
    TEXT = "TEXT",
    HEADING = "HEADING",
    BULLETED_LIST = "BULLETED_LIST",
    ORDERED_LIST = "ORDERED_LIST",
    LIST_ITEM = "LIST_ITEM",
    BLOCKQUOTE = "BLOCKQUOTE",
    CODE_BLOCK = "CODE_BLOCK",
    VIDEO = "VIDEO",
    DIVIDER = "DIVIDER",
    FILE = "FILE",
    GALLERY = "GALLERY",
    GIF = "GIF",
    HTML = "HTML",
    IMAGE = "IMAGE",
    LINK_PREVIEW = "LINK_PREVIEW",
    /** @deprecated */
    MAP = "MAP",
    POLL = "POLL",
    APP_EMBED = "APP_EMBED",
    BUTTON = "BUTTON",
    COLLAPSIBLE_LIST = "COLLAPSIBLE_LIST",
    TABLE = "TABLE",
    EMBED = "EMBED",
    COLLAPSIBLE_ITEM = "COLLAPSIBLE_ITEM",
    COLLAPSIBLE_ITEM_TITLE = "COLLAPSIBLE_ITEM_TITLE",
    COLLAPSIBLE_ITEM_BODY = "COLLAPSIBLE_ITEM_BODY",
    TABLE_CELL = "TABLE_CELL",
    TABLE_ROW = "TABLE_ROW",
    EXTERNAL = "EXTERNAL",
    AUDIO = "AUDIO",
    CAPTION = "CAPTION",
    LAYOUT = "LAYOUT",
    LAYOUT_CELL = "LAYOUT_CELL"
}
export interface NodeStyle {
    /** The top padding value in pixels. */
    paddingTop?: string | null;
    /** The bottom padding value in pixels. */
    paddingBottom?: string | null;
    /** The background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
export interface ButtonData {
    /** Styling for the button's container. */
    containerData?: PluginContainerData;
    /** The button type. */
    type?: Type;
    /** Styling for the button. */
    styles?: Styles;
    /** The text to display on the button. */
    text?: string | null;
    /** Button link details. */
    link?: Link;
}
export interface Border {
    /** Border width in pixels. */
    width?: number | null;
    /** Border radius in pixels. */
    radius?: number | null;
}
export interface Colors {
    /** The text color as a hexadecimal value. */
    text?: string | null;
    /** The border color as a hexadecimal value. */
    border?: string | null;
    /** The background color as a hexadecimal value. */
    background?: string | null;
}
export interface PluginContainerData {
    /** The width of the node when it's displayed. */
    width?: PluginContainerDataWidth;
    /** The node's alignment within its container. */
    alignment?: PluginContainerDataAlignment;
    /** Spoiler cover settings for the node. */
    spoiler?: Spoiler;
    /** The height of the node when it's displayed. */
    height?: Height;
    /** Sets whether text should wrap around this node when it's displayed. If `textWrap` is `false`, the node takes up the width of its container. Defaults to `true` for all node types except 'DIVIVDER' where it defaults to `false`. */
    textWrap?: boolean | null;
}
export declare enum WidthType {
    /** Width matches the content width */
    CONTENT = "CONTENT",
    /** Small Width */
    SMALL = "SMALL",
    /** Width will match the original asset width */
    ORIGINAL = "ORIGINAL",
    /** coast-to-coast display */
    FULL_WIDTH = "FULL_WIDTH"
}
export interface PluginContainerDataWidth extends PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType;
    /** A custom width value in pixels. */
    custom?: string | null;
}
/** @oneof */
export interface PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType;
    /** A custom width value in pixels. */
    custom?: string | null;
}
export declare enum PluginContainerDataAlignment {
    /** Center Alignment */
    CENTER = "CENTER",
    /** Left Alignment */
    LEFT = "LEFT",
    /** Right Alignment */
    RIGHT = "RIGHT"
}
export interface Spoiler {
    /** Sets whether the spoiler cover is enabled for this node. Defaults to `false`. */
    enabled?: boolean | null;
    /** The description displayed on top of the spoiler cover. */
    description?: string | null;
    /** The text for the button used to remove the spoiler cover. */
    buttonText?: string | null;
}
export interface Height {
    /** A custom height value in pixels. */
    custom?: string | null;
}
export declare enum Type {
    /** Regular link button */
    LINK = "LINK",
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    ACTION = "ACTION"
}
export interface Styles {
    /** Border attributes. */
    border?: Border;
    /** Color attributes. */
    colors?: Colors;
}
export interface Link extends LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
    /**
     * he HTML `target` attribute value for the link. This property defines where the linked document opens as follows:
     * `SELF` - Default. Opens the linked document in the same frame as the link.
     * `BLANK` - Opens the linked document in a new browser tab or window.
     * `PARENT` - Opens the linked document in the link's parent frame.
     * `TOP` - Opens the linked document in the full body of the link's browser tab or window.
     */
    target?: Target;
    /** The HTML `rel` attribute value for the link. This object specifies the relationship between the current document and the linked document. */
    rel?: Rel;
    /** A serialized object used for a custom or external link panel. */
    customData?: string | null;
}
/** @oneof */
export interface LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
}
export declare enum Target {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    SELF = "SELF",
    /** Opens the linked document in a new window or tab */
    BLANK = "BLANK",
    /** Opens the linked document in the parent frame */
    PARENT = "PARENT",
    /** Opens the linked document in the full body of the window */
    TOP = "TOP"
}
export interface Rel {
    /** Indicates to search engine crawlers not to follow the link. Defaults to `false`. */
    nofollow?: boolean | null;
    /** Indicates to search engine crawlers that the link is a paid placement such as sponsored content or an advertisement. Defaults to `false`. */
    sponsored?: boolean | null;
    /** Indicates that this link is user-generated content and isn't necessarily trusted or endorsed by the page’s author. For example, a link in a fourm post. Defaults to `false`. */
    ugc?: boolean | null;
    /** Indicates that this link protect referral information from being passed to the target website. */
    noreferrer?: boolean | null;
}
export interface CodeBlockData {
    /** Styling for the code block's text. */
    textStyle?: TextStyle;
}
export interface TextStyle {
    /** Text alignment. Defaults to `AUTO`. */
    textAlignment?: TextAlignment;
    /** A CSS `line-height` value for the text expressed as a ratio relative to the font size. For example, if the font size is 20px, a `lineHeight` value of `'1.5'`` results in a line height of 30px. */
    lineHeight?: string | null;
}
export declare enum TextAlignment {
    /** browser default, eqivalent to `initial` */
    AUTO = "AUTO",
    /** Left align */
    LEFT = "LEFT",
    /** Right align */
    RIGHT = "RIGHT",
    /** Center align */
    CENTER = "CENTER",
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    JUSTIFY = "JUSTIFY"
}
export interface DividerData {
    /** Styling for the divider's container. */
    containerData?: PluginContainerData;
    /** Divider line style. */
    lineStyle?: LineStyle;
    /** Divider width. */
    width?: Width;
    /** Divider alignment. */
    alignment?: Alignment;
}
export declare enum LineStyle {
    /** Single Line */
    SINGLE = "SINGLE",
    /** Double Line */
    DOUBLE = "DOUBLE",
    /** Dashed Line */
    DASHED = "DASHED",
    /** Dotted Line */
    DOTTED = "DOTTED"
}
export declare enum Width {
    /** Large line */
    LARGE = "LARGE",
    /** Medium line */
    MEDIUM = "MEDIUM",
    /** Small line */
    SMALL = "SMALL"
}
export declare enum Alignment {
    /** Center alignment */
    CENTER = "CENTER",
    /** Left alignment */
    LEFT = "LEFT",
    /** Right alignment */
    RIGHT = "RIGHT"
}
export interface FileData {
    /** Styling for the file's container. */
    containerData?: PluginContainerData;
    /** The source for the file's data. */
    src?: FileSource;
    /** File name. */
    name?: string | null;
    /** File type. */
    type?: string | null;
    /**
     * Use `sizeInKb` instead.
     * @deprecated
     */
    size?: number | null;
    /** Settings for PDF files. */
    pdfSettings?: PDFSettings;
    /** File MIME type. */
    mimeType?: string | null;
    /** File path. */
    path?: string | null;
    /** File size in KB. */
    sizeInKb?: string | null;
}
export declare enum ViewMode {
    /** No PDF view */
    NONE = "NONE",
    /** Full PDF view */
    FULL = "FULL",
    /** Mini PDF view */
    MINI = "MINI"
}
export interface FileSource extends FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    _id?: string | null;
    /** Indicates whether the file's source is private. Defaults to `false`. */
    private?: boolean | null;
}
/** @oneof */
export interface FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    _id?: string | null;
}
export interface PDFSettings {
    /**
     * PDF view mode. One of the following:
     * `NONE` : The PDF isn't displayed.
     * `FULL` : A full page view of the PDF is displayed.
     * `MINI` : A mini view of the PDF is displayed.
     */
    viewMode?: ViewMode;
    /** Sets whether the PDF download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Sets whether the PDF print button is disabled. Defaults to `false`. */
    disablePrint?: boolean | null;
}
export interface GalleryData {
    /** Styling for the gallery's container. */
    containerData?: PluginContainerData;
    /** The items in the gallery. */
    items?: Item[];
    /** Options for defining the gallery's appearance. */
    options?: GalleryOptions;
    /** Sets whether the gallery's expand button is disabled. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Sets whether the gallery's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
export interface V1Media {
    /** The source for the media's data. */
    src?: FileSource;
    /** Media width in pixels. */
    width?: number | null;
    /** Media height in pixels. */
    height?: number | null;
    /** Media duration in seconds. Only relevant for audio and video files. */
    duration?: number | null;
}
export interface Image {
    /** Image file details. */
    media?: V1Media;
    /** Link details for images that are links. */
    link?: Link;
}
export interface Video {
    /** Video file details. */
    media?: V1Media;
    /** Video thumbnail file details. */
    thumbnail?: V1Media;
}
export interface Item extends ItemDataOneOf {
    /** An image item. */
    image?: Image;
    /** A video item. */
    video?: Video;
    /** Item title. */
    title?: string | null;
    /** Item's alternative text. */
    altText?: string | null;
}
/** @oneof */
export interface ItemDataOneOf {
    /** An image item. */
    image?: Image;
    /** A video item. */
    video?: Video;
}
export interface GalleryOptions {
    /** Gallery layout. */
    layout?: Layout;
    /** Styling for gallery items. */
    item?: ItemStyle;
    /** Styling for gallery thumbnail images. */
    thumbnails?: Thumbnails;
}
export declare enum LayoutType {
    /** Collage type */
    COLLAGE = "COLLAGE",
    /** Masonry type */
    MASONRY = "MASONRY",
    /** Grid type */
    GRID = "GRID",
    /** Thumbnail type */
    THUMBNAIL = "THUMBNAIL",
    /** Slider type */
    SLIDER = "SLIDER",
    /** Slideshow type */
    SLIDESHOW = "SLIDESHOW",
    /** Panorama type */
    PANORAMA = "PANORAMA",
    /** Column type */
    COLUMN = "COLUMN",
    /** Magic type */
    MAGIC = "MAGIC",
    /** Fullsize images type */
    FULLSIZE = "FULLSIZE"
}
export declare enum Orientation {
    /** Rows Orientation */
    ROWS = "ROWS",
    /** Columns Orientation */
    COLUMNS = "COLUMNS"
}
export declare enum Crop {
    /** Crop to fill */
    FILL = "FILL",
    /** Crop to fit */
    FIT = "FIT"
}
export declare enum ThumbnailsAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Right alignment */
    RIGHT = "RIGHT",
    /** Bottom alignment */
    BOTTOM = "BOTTOM",
    /** Left alignment */
    LEFT = "LEFT",
    /** No thumbnail */
    NONE = "NONE"
}
export interface Layout {
    /** Gallery layout type. */
    type?: LayoutType;
    /** Sets whether horizontal scroll is enabled. Defaults to `true` unless the layout `type` is set to `GRID` or `COLLAGE`. */
    horizontalScroll?: boolean | null;
    /** Gallery orientation. */
    orientation?: Orientation;
    /** The number of columns to display on full size screens. */
    numberOfColumns?: number | null;
    /** The number of columns to display on mobile screens. */
    mobileNumberOfColumns?: number | null;
}
export interface ItemStyle {
    /** Desirable dimension for each item in pixels (behvaior changes according to gallery type) */
    targetSize?: number | null;
    /** Item ratio */
    ratio?: number | null;
    /** Sets how item images are cropped. */
    crop?: Crop;
    /** The spacing between items in pixels. */
    spacing?: number | null;
}
export interface Thumbnails {
    /** Thumbnail alignment. */
    placement?: ThumbnailsAlignment;
    /** Spacing between thumbnails in pixels. */
    spacing?: number | null;
}
export interface GIFData {
    /** Styling for the GIF's container. */
    containerData?: PluginContainerData;
    /** The source of the full size GIF. */
    original?: GIF;
    /** The source of the downsized GIF. */
    downsized?: GIF;
    /** Height in pixels. */
    height?: number;
    /** Width in pixels. */
    width?: number;
    /** Type of GIF (Sticker or NORMAL). Defaults to `NORMAL`. */
    gifType?: GIFType;
}
export interface GIF {
    /** GIF format URL. */
    gif?: string | null;
    /** MP4 format URL. */
    mp4?: string | null;
    /** Thumbnail URL. */
    still?: string | null;
}
export declare enum GIFType {
    NORMAL = "NORMAL",
    STICKER = "STICKER"
}
export interface HeadingData {
    /** Heading level from 1-6. */
    level?: number;
    /** Styling for the heading text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
}
export interface HTMLData extends HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
    /** Styling for the HTML node's container. Height property is irrelevant for HTML embeds when autoHeight is set to `true`. */
    containerData?: PluginContainerData;
    /** The type of HTML code. */
    source?: Source;
    /** If container height is aligned with its content height. Defaults to `true`. */
    autoHeight?: boolean | null;
}
/** @oneof */
export interface HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
}
export declare enum Source {
    HTML = "HTML",
    ADSENSE = "ADSENSE"
}
export interface ImageData {
    /** Styling for the image's container. */
    containerData?: PluginContainerData;
    /** Image file details. */
    image?: V1Media;
    /** Link details for images that are links. */
    link?: Link;
    /** Sets whether the image expands to full screen when clicked. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Image's alternative text. */
    altText?: string | null;
    /**
     * Deprecated: use Caption node instead.
     * @deprecated
     */
    caption?: string | null;
    /** Sets whether the image's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
export interface LinkPreviewData {
    /** Styling for the link preview's container. */
    containerData?: PluginContainerData;
    /** Link details. */
    link?: Link;
    /** Preview title. */
    title?: string | null;
    /** Preview thumbnail URL. */
    thumbnailUrl?: string | null;
    /** Preview description. */
    description?: string | null;
    /** The preview content as HTML. */
    html?: string | null;
}
export interface MapData {
    /** Styling for the map's container. */
    containerData?: PluginContainerData;
    /** Map settings. */
    mapSettings?: MapSettings;
}
export interface MapSettings {
    /** The address to display on the map. */
    address?: string | null;
    /** Sets whether the map is draggable. */
    draggable?: boolean | null;
    /** Sets whether the location marker is visible. */
    marker?: boolean | null;
    /** Sets whether street view control is enabled. */
    streetViewControl?: boolean | null;
    /** Sets whether zoom control is enabled. */
    zoomControl?: boolean | null;
    /** Location latitude. */
    lat?: number | null;
    /** Location longitude. */
    lng?: number | null;
    /** Location name. */
    locationName?: string | null;
    /** Sets whether view mode control is enabled. */
    viewModeControl?: boolean | null;
    /** Initial zoom value. */
    initialZoom?: number | null;
    /** Map type. `HYBRID` is a combination of the `ROADMAP` and `SATELLITE` map types. */
    mapType?: MapType;
}
export declare enum MapType {
    /** Roadmap map type */
    ROADMAP = "ROADMAP",
    /** Satellite map type */
    SATELITE = "SATELITE",
    /** Hybrid map type */
    HYBRID = "HYBRID",
    /** Terrain map type */
    TERRAIN = "TERRAIN"
}
export interface ParagraphData {
    /** Styling for the paragraph text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
    /** Paragraph level */
    level?: number | null;
}
export interface PollData {
    /** Styling for the poll's container. */
    containerData?: PluginContainerData;
    /** Poll data. */
    poll?: Poll;
    /** Layout settings for the poll and voting options. */
    layout?: PollDataLayout;
    /** Styling for the poll and voting options. */
    design?: Design;
}
export declare enum ViewRole {
    /** Only Poll creator can view the results */
    CREATOR = "CREATOR",
    /** Anyone who voted can see the results */
    VOTERS = "VOTERS",
    /** Anyone can see the results, even if one didn't vote */
    EVERYONE = "EVERYONE"
}
export declare enum VoteRole {
    /** Logged in member */
    SITE_MEMBERS = "SITE_MEMBERS",
    /** Anyone */
    ALL = "ALL"
}
export interface Permissions {
    /** Sets who can view the poll results. */
    view?: ViewRole;
    /** Sets who can vote. */
    vote?: VoteRole;
    /** Sets whether one voter can vote multiple times. Defaults to `false`. */
    allowMultipleVotes?: boolean | null;
}
export interface Option {
    /** Option ID. */
    _id?: string | null;
    /** Option title. */
    title?: string | null;
    /** The image displayed with the option. */
    image?: V1Media;
}
export interface PollSettings {
    /** Permissions settings for voting. */
    permissions?: Permissions;
    /** Sets whether voters are displayed in the vote results. Defaults to `true`. */
    showVoters?: boolean | null;
    /** Sets whether the vote count is displayed. Defaults to `true`. */
    showVotesCount?: boolean | null;
}
export declare enum PollLayoutType {
    /** List */
    LIST = "LIST",
    /** Grid */
    GRID = "GRID"
}
export declare enum PollLayoutDirection {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
export interface PollLayout {
    /** The layout for displaying the voting options. */
    type?: PollLayoutType;
    /** The direction of the text displayed in the voting options. Text can be displayed either right-to-left or left-to-right. */
    direction?: PollLayoutDirection;
    /** Sets whether to display the main poll image. Defaults to `false`. */
    enableImage?: boolean | null;
}
export interface OptionLayout {
    /** Sets whether to display option images. Defaults to `false`. */
    enableImage?: boolean | null;
}
export declare enum BackgroundType {
    /** Color background type */
    COLOR = "COLOR",
    /** Image background type */
    IMAGE = "IMAGE",
    /** Gradiant background type */
    GRADIENT = "GRADIENT"
}
export interface Gradient {
    /** The gradient angle in degrees. */
    angle?: number | null;
    /** The start color as a hexademical value. */
    startColor?: string | null;
    /** The end color as a hexademical value. */
    lastColor?: string | null;
}
export interface Background extends BackgroundBackgroundOneOf {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
    /** Background type. For each option, include the relevant details. */
    type?: BackgroundType;
}
/** @oneof */
export interface BackgroundBackgroundOneOf {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
}
export interface PollDesign {
    /** Background styling. */
    background?: Background;
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
export interface OptionDesign {
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
export interface Poll {
    /** Poll ID. */
    _id?: string | null;
    /** Poll title. */
    title?: string | null;
    /** Poll creator ID. */
    creatorId?: string | null;
    /** Main poll image. */
    image?: V1Media;
    /** Voting options. */
    options?: Option[];
    /** The poll's permissions and display settings. */
    settings?: PollSettings;
}
export interface PollDataLayout {
    /** Poll layout settings. */
    poll?: PollLayout;
    /** Voting otpions layout settings. */
    options?: OptionLayout;
}
export interface Design {
    /** Styling for the poll. */
    poll?: PollDesign;
    /** Styling for voting options. */
    options?: OptionDesign;
}
export interface TextData {
    /** The text to apply decorations to. */
    text?: string;
    /** The decorations to apply. */
    decorations?: Decoration[];
}
/** Adds appearence changes to text */
export interface Decoration extends DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
    /** The type of decoration to apply. */
    type?: DecorationType;
}
/** @oneof */
export interface DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
}
export declare enum DecorationType {
    BOLD = "BOLD",
    ITALIC = "ITALIC",
    UNDERLINE = "UNDERLINE",
    SPOILER = "SPOILER",
    ANCHOR = "ANCHOR",
    MENTION = "MENTION",
    LINK = "LINK",
    COLOR = "COLOR",
    FONT_SIZE = "FONT_SIZE",
    EXTERNAL = "EXTERNAL"
}
export interface AnchorData {
    /** The target node's ID. */
    anchor?: string;
}
export interface ColorData {
    /** The text's background color as a hexadecimal value. */
    background?: string | null;
    /** The text's foreground color as a hexadecimal value. */
    foreground?: string | null;
}
export interface LinkData {
    /** Link details. */
    link?: Link;
}
export interface MentionData {
    /** The mentioned user's name. */
    name?: string;
    /** The version of the user's name that appears after the `@` character in the mention. */
    slug?: string;
    /** Mentioned user's ID. */
    _id?: string | null;
}
export interface FontSizeData {
    /** The units used for the font size. */
    unit?: FontType;
    /** Font size value. */
    value?: number | null;
}
export declare enum FontType {
    PX = "PX",
    EM = "EM"
}
export interface SpoilerData {
    /** Spoiler ID. */
    _id?: string | null;
}
export interface AppEmbedData extends AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
    /** The type of Wix App content being embedded. */
    type?: AppType;
    /** The ID of the embedded content. */
    itemId?: string | null;
    /** The name of the embedded content. */
    name?: string | null;
    /**
     * Deprecated: Use `image` instead.
     * @deprecated
     */
    imageSrc?: string | null;
    /** The URL for the embedded content. */
    url?: string | null;
    /** An image for the embedded content. */
    image?: V1Media;
}
/** @oneof */
export interface AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
}
export declare enum AppType {
    PRODUCT = "PRODUCT",
    EVENT = "EVENT",
    BOOKING = "BOOKING"
}
export interface BookingData {
    /** Booking duration in minutes. */
    durations?: string | null;
}
export interface EventData {
    /** Event schedule. */
    scheduling?: string | null;
    /** Event location. */
    location?: string | null;
}
export interface VideoData {
    /** Styling for the video's container. */
    containerData?: PluginContainerData;
    /** Video details. */
    video?: V1Media;
    /** Video thumbnail details. */
    thumbnail?: V1Media;
    /** Sets whether the video's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Video title. */
    title?: string | null;
    /** Video options. */
    options?: PlaybackOptions;
}
export interface PlaybackOptions {
    /** Sets whether the media will automatically start playing. */
    autoPlay?: boolean | null;
    /** Sets whether media's will be looped. */
    playInLoop?: boolean | null;
    /** Sets whether media's controls will be shown. */
    showControls?: boolean | null;
}
export interface EmbedData {
    /** Styling for the oEmbed node's container. */
    containerData?: PluginContainerData;
    /** An [oEmbed](https://www.oembed.com) object. */
    oembed?: Oembed;
    /** Origin asset source. */
    src?: string | null;
}
export interface Oembed {
    /** The resource type. */
    type?: string | null;
    /** The width of the resource specified in the `url` property in pixels. */
    width?: number | null;
    /** The height of the resource specified in the `url` property in pixels. */
    height?: number | null;
    /** Resource title. */
    title?: string | null;
    /** The source URL for the resource. */
    url?: string | null;
    /** HTML for embedding a video player. The HTML should have no padding or margins. */
    html?: string | null;
    /** The name of the author or owner of the resource. */
    authorName?: string | null;
    /** The URL for the author or owner of the resource. */
    authorUrl?: string | null;
    /** The name of the resource provider. */
    providerName?: string | null;
    /** The URL for the resource provider. */
    providerUrl?: string | null;
    /** The URL for a thumbnail image for the resource. If this property is defined, `thumbnailWidth` and `thumbnailHeight` must also be defined. */
    thumbnailUrl?: string | null;
    /** The width of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailHeight` must also be defined. */
    thumbnailWidth?: string | null;
    /** The height of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailWidth`must also be defined. */
    thumbnailHeight?: string | null;
    /** The URL for an embedded viedo. */
    videoUrl?: string | null;
    /** The oEmbed version number.  This value must be `1.0`. */
    version?: string | null;
}
export interface CollapsibleListData {
    /** Styling for the collapsible list's container. */
    containerData?: PluginContainerData;
    /** If `true`, only one item can be expanded at a time. Defaults to `false`. */
    expandOnlyOne?: boolean | null;
    /** Sets which items are expanded when the page loads. */
    initialExpandedItems?: InitialExpandedItems;
    /** The direction of the text in the list. Either left-to-right or right-to-left. */
    direction?: Direction;
    /** If `true`, The collapsible item will appear in search results as an FAQ. */
    isQapageData?: boolean | null;
}
export declare enum InitialExpandedItems {
    /** First item will be expended initally */
    FIRST = "FIRST",
    /** All items will expended initally */
    ALL = "ALL",
    /** All items collapsed initally */
    NONE = "NONE"
}
export declare enum Direction {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
export interface TableData {
    /** Styling for the table's container. */
    containerData?: PluginContainerData;
    /** The table's dimensions. */
    dimensions?: Dimensions;
    /**
     * Deprecated: Use `rowHeader` and `columnHeader` instead.
     * @deprecated
     */
    header?: boolean | null;
    /** Sets whether the table's first row is a header. Defaults to `false`. */
    rowHeader?: boolean | null;
    /** Sets whether the table's first column is a header. Defaults to `false`. */
    columnHeader?: boolean | null;
}
export interface Dimensions {
    /** An array representing relative width of each column in relation to the other columns. */
    colsWidthRatio?: number[];
    /** An array representing the height of each row in pixels. */
    rowsHeight?: number[];
    /** An array representing the minimum width of each column in pixels. */
    colsMinWidth?: number[];
}
export interface TableCellData {
    /** Styling for the cell's background color and text alignment. */
    cellStyle?: CellStyle;
    /** The cell's border colors. */
    borderColors?: BorderColors;
}
export declare enum VerticalAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Middle alignment */
    MIDDLE = "MIDDLE",
    /** Bottom alignment */
    BOTTOM = "BOTTOM"
}
export interface CellStyle {
    /** Vertical alignment for the cell's text. */
    verticalAlignment?: VerticalAlignment;
    /** Cell background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
export interface BorderColors {
    /** Left border color as a hexadecimal value. */
    left?: string | null;
    /** Right border color as a hexadecimal value. */
    right?: string | null;
    /** Top border color as a hexadecimal value. */
    top?: string | null;
    /** Bottom border color as a hexadecimal value. */
    bottom?: string | null;
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 */
export declare enum NullValue {
    /** Null value. */
    NULL_VALUE = "NULL_VALUE"
}
/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 */
export interface ListValue {
    /** Repeated field of dynamically typed values. */
    values?: any[];
}
export interface AudioData {
    /** Styling for the audio node's container. */
    containerData?: PluginContainerData;
    /** Audio file details. */
    audio?: V1Media;
    /** Sets whether the audio node's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Cover image. */
    coverImage?: V1Media;
    /** Track name. */
    name?: string | null;
    /** Author name. */
    authorName?: string | null;
    /** An HTML version of the audio node. */
    html?: string | null;
}
export interface OrderedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
    /** List start number. */
    start?: number | null;
}
export interface BulletedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
}
export interface BlockquoteData {
    /** Indentation level from 1-4. */
    indentation?: number;
}
export interface CaptionData {
    textStyle?: TextStyle;
}
export interface LayoutCellData {
    /** Size of the cell in 12 columns grid. */
    colSpan?: number | null;
}
export interface Metadata {
    /** Schema version. */
    version?: number;
    /**
     * When the object was created.
     * @readonly
     * @deprecated
     */
    createdTimestamp?: Date | null;
    /**
     * When the object was most recently updated.
     * @deprecated
     */
    updatedTimestamp?: Date | null;
    /** Object ID. */
    _id?: string | null;
}
export interface DocumentStyle {
    /** Styling for H1 nodes. */
    headerOne?: TextNodeStyle;
    /** Styling for H2 nodes. */
    headerTwo?: TextNodeStyle;
    /** Styling for H3 nodes. */
    headerThree?: TextNodeStyle;
    /** Styling for H4 nodes. */
    headerFour?: TextNodeStyle;
    /** Styling for H5 nodes. */
    headerFive?: TextNodeStyle;
    /** Styling for H6 nodes. */
    headerSix?: TextNodeStyle;
    /** Styling for paragraph nodes. */
    paragraph?: TextNodeStyle;
    /** Styling for block quote nodes. */
    blockquote?: TextNodeStyle;
    /** Styling for code block nodes. */
    codeBlock?: TextNodeStyle;
}
export interface TextNodeStyle {
    /** The decorations to apply to the node. */
    decorations?: Decoration[];
    /** Padding and background color for the node. */
    nodeStyle?: NodeStyle;
    /** Line height for text in the node. */
    lineHeight?: string | null;
}
export interface ModerationDetails {
    /** Member ID of the person who submitted the post. */
    submittedBy?: string;
    /** Date and time the post was submitted for moderation. */
    submittedDate?: Date | null;
    /** Status indicating whether the submission was approved or rejected by the moderator. */
    status?: ModerationStatusStatus;
    /** Member ID of the person who approved or rejected the post. */
    moderatedBy?: string | null;
    /** Date and time the post was approved or rejected by a moderator. */
    moderationDate?: Date | null;
}
export declare enum ModerationStatusStatus {
    UNKNOWN = "UNKNOWN",
    APPROVED = "APPROVED",
    REJECTED = "REJECTED"
}
export interface Media extends MediaMediaOneOf {
    /** Wix Media details. */
    wixMedia?: WixMedia;
    /** Embed media details. */
    embedMedia?: EmbedMedia;
    /** Whether cover media is displayed. */
    displayed?: boolean;
    /**
     * Whether the cover media is custom.
     *
     * `false` if the cover media is the first image or video in the post. `true` if set to some other image or video.
     */
    custom?: boolean;
    /** Media alternative text. */
    altText?: string | null;
}
/** @oneof */
export interface MediaMediaOneOf {
    /** Wix Media details. */
    wixMedia?: WixMedia;
    /** Embed media details. */
    embedMedia?: EmbedMedia;
}
export interface WixMedia {
    /** Image details. */
    image?: string;
    /** Video details. */
    videoV2?: string;
}
export interface VideoResolution {
    /** Video URL. */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /** Video format for example, mp4, hls. */
    format?: string;
}
export interface EmbedMedia {
    /** Thumbnail details. */
    thumbnail?: EmbedThumbnail;
    /** Video details. */
    video?: EmbedVideo;
}
export interface EmbedThumbnail {
    /** Thumbnail url. */
    url?: string;
    /** Thumbnail width. */
    width?: number;
    /** Thumbnail height. */
    height?: number;
}
export interface EmbedVideo {
    /** Video url. */
    url?: string;
    /** Video width. */
    width?: number;
    /** Video height. */
    height?: number;
}
export interface PostTranslation {
    /** Post ID. */
    _id?: string;
    /** Language the post is written in. */
    language?: string | null;
    /** Post slug. For example, 'post-slug'. */
    slug?: string | null;
    /** SEO data. */
    seoData?: SeoSchema;
    /** Post URL. */
    url?: string;
}
export interface PostCategoriesUpdated {
    /** ID of the post which counters were updated. */
    postId?: string;
    /** Current categories of the post. */
    categories?: string[];
    /** Previous categories of the post. */
    previousCategories?: string[];
}
export interface PostTagsUpdated {
    /** ID of the post which counters were updated. */
    postId?: string;
    /** Current tags of the post. */
    tags?: string[];
    /** Previous tags of the post. */
    previousTags?: string[];
}
export interface ScheduledPostPublished {
    /** ID of the scheduled post which was published. */
    postId?: string;
}
export interface ConvertDraftJsToRichContentRequest {
    /** DraftJs content to convert to Rich content. */
    content?: Record<string, any> | null;
}
export interface ConvertDraftJsToRichContentResponse {
    /** Rich content converted from DraftJs content. */
    richContent?: string;
}
export interface ConvertRichContentToDraftJsRequest {
    /** Rich content to convert to DraftJs content. */
    richContent?: string;
}
export interface ConvertRichContentToDraftJsResponse {
    /** DraftJs content converted from Rich content. */
    content?: Record<string, any> | null;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entity?: string;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
export interface ActionEvent {
    body?: string;
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface ListDemoPostsRequest {
    /**
     * Whether to return only featured posts.
     *
     * Default: `false`
     */
    featured?: boolean;
    /**
     * Hashtag filter.
     *
     * Pass an array of hashtags to return only posts containing any of the provided hashtags.
     * If omitted, all posts with or without hashtags are returned.
     */
    hashtags?: string[];
    /**
     * Category filter.
     *
     * Pass an array of category IDs to return only posts with any of the provided categories.
     * If omitted, all posts with or without associated categories are returned.
     */
    categoryIds?: string[];
    /**
     * Tag filter.
     *
     * Pass an array of tag IDs to return only posts with any of the provided tags.
     * If omitted, all posts with or without tags are returned.
     */
    tagIds?: string[];
    /**
     * Sorting options.
     *
     * - `FEED`: Ordered by `firstPublishedDate` in descending order with pinned posts first.
     * - `VIEW_COUNT`: Ordered by total number of views in descending order.
     * - `LIKE_COUNT`: Ordered by total number of likes in descending order.
     * - `PUBLISHED_DATE_ASC`: Ordered by `firstPublishedDate` in ascending order.
     * - `PUBLISHED_DATE_DESC`: Ordered by `firstPublishedDate` in descending order.
     * - `TITLE_ASC`: Ordered by `title` in ascening order.
     * - `TITLE_DESC`: Ordered by `title` in descending order.
     * - `RATING`: reserved for internal use.
     *
     * Default: `FEED`
     */
    sort?: GetPostsSort;
    /** Pagination options. */
    paging?: BlogPaging;
    /**
     * __Deprecated.__ Use `fieldsets` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * List of post fields to be included in the response.
     * @deprecated __Deprecated.__ Use `fieldsets` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * List of post fields to be included in the response.
     * @replacedBy fieldsets
     * @targetRemovalDate 2024-06-30
     */
    fieldsToInclude?: PostFieldField[];
    /**
     * Language filter.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * Pass a language to only receive posts that are in that language.
     * If omitted, posts in all languages are returned.
     */
    language?: string | null;
    /** Post owner's member ID. */
    memberId?: string | null;
    /**
     * List of additional post fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the post’s base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the post’s base fields are returned.
     */
    fieldsets?: PostFieldField[];
}
export declare enum GetPostsSort {
    /** Ordered by `firstPublishedDate` in descending order with pinned posts first. */
    FEED = "FEED",
    /** Ordered by `firstPublishedDate` in ascending order. */
    PUBLISHED_DATE_ASC = "PUBLISHED_DATE_ASC",
    /** Ordered by `firstPublishedDate` in descending order. */
    PUBLISHED_DATE_DESC = "PUBLISHED_DATE_DESC",
    /** Ordered by total number of views in descending order. */
    VIEW_COUNT = "VIEW_COUNT",
    /** Ordered by total number of likes in descending order. */
    LIKE_COUNT = "LIKE_COUNT",
    /** Ordered by `title` in ascening order. */
    TITLE_ASC = "TITLE_ASC",
    /** Ordered by `title` in descending order. */
    TITLE_DESC = "TITLE_DESC"
}
export interface BlogPaging {
    /**
     * Number of items to skip in the current sort order.
     *
     *
     * Default: `0`
     */
    offset?: number;
    /**
     * Number of items to return.
     *
     *
     * Default:`50`
     */
    limit?: number;
    /** Pointer to the next or previous page in the list of results. */
    cursor?: string | null;
}
export declare enum PostFieldField {
    UNKNOWN = "UNKNOWN",
    /** Includes Post url when present. */
    URL = "URL",
    /** Includes Post content text string when present. */
    CONTENT_TEXT = "CONTENT_TEXT",
    /** Includes Post metrics when present. */
    METRICS = "METRICS",
    /** Includes SEO data. */
    SEO = "SEO",
    /** Includes post owner's contact ID */
    CONTACT_ID = "CONTACT_ID",
    /** Includes post rich content. */
    RICH_CONTENT = "RICH_CONTENT",
    /** Includes post reference id field. */
    REFERENCE_ID = "REFERENCE_ID"
}
export interface ListDemoPostsResponse {
    /** List of posts. */
    posts?: Post[];
    /** Details on the paged set of results returned. */
    metaData?: MetaData;
}
export interface MetaData {
    /** Number of items returned in this response. */
    count?: number;
    /**
     * Number of items skipped in the current sort order.
     *
     *
     */
    offset?: number;
    /** Total number of items that match the query. */
    total?: number;
    /** Pointer to the next or previous page in the list of results. */
    cursor?: string | null;
}
export interface ListTemplatesRequest {
    /** Filter post templates by given template category ids */
    categoryIds?: string[];
    /** Filter post templates by provided language */
    language?: string | null;
    /** Returns post template categories when set to TRUE */
    listTemplateCategories?: boolean;
    /** Sort order by ascending/descending publish date. Default is ascending publish date sort */
    sort?: GetPostTemplatesSort;
    /** Pagination options. */
    paging?: BlogPaging;
}
export declare enum GetPostTemplatesSort {
    /** Sort by ascending publishing date. */
    PUBLISHED_DATE_ASC = "PUBLISHED_DATE_ASC",
    /** Sort by descending publishing date. */
    PUBLISHED_DATE_DESC = "PUBLISHED_DATE_DESC"
}
export interface ListTemplatesResponse {
    /** Available post templates */
    postTemplates?: Post[];
    /** Details on the paged set of posts templates returned. */
    postTemplatesMetaData?: MetaData;
    /** Post template categories. This value is returned empty unless asked explicitly */
    templateCategories?: Category[];
}
export interface Category {
    /** Category ID. */
    _id?: string;
    /** Category label. Displayed in the Category Menu. */
    label?: string;
    /**
     * Number of posts in the category.
     * @readonly
     */
    postCount?: number;
    /**
     * The `url` of the page that lists every post with the specified category.
     * @readonly
     */
    url?: string;
    /** Category description. */
    description?: string | null;
    /**
     * Category title.
     * @deprecated Category title.
     * @targetRemovalDate 2025-07-16
     */
    title?: string;
    /**
     * Position of the category in the [Category Menu](https://support.wix.com/en/article/wix-blog-adding-and-customizing-a-category-menu).
     * Categories are displayed in ascending order. Categories with a position of `-1` appear at the end of the sequence.
     *
     * Default: `-1`
     */
    displayPosition?: number | null;
    /** ID of the category's translations. All translations of a single category share the same `translationId`. */
    translationId?: string | null;
    /**
     * Category language.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     */
    language?: string | null;
    /** Part of a category's URL that refers to a specific category. For example, the slug of `https:/example.com/blog/category/famous-cats` is `famous-cats`. */
    slug?: string;
    /**
     * Reserved for internal use.
     * @readonly
     */
    internalId?: string | null;
    /** SEO data. */
    seoData?: SeoSchema;
    /** Category cover image. */
    coverImage?: string;
    /**
     * Date and time the Category was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
export interface CategoryTranslation {
    /** Category ID. */
    _id?: string;
    /** Label displayed in the categories menu on the site. */
    label?: string | null;
    /** Language of the category. */
    language?: string | null;
    /** URL of this category page. */
    url?: string;
}
export interface GetTemplateRequest {
    /** Post template id */
    postTemplateId?: string;
}
export interface GetTemplateResponse {
    /** Post template */
    postTemplate?: Post;
}
export interface CreateDraftPostFromTemplateRequest {
    /** Post template id */
    postTemplateId?: string;
}
export interface CreateDraftPostFromTemplateResponse {
    /** Created draft post */
    draftPost?: DraftPost;
}
export interface DraftPost {
    /**
     * Draft post ID.
     * @readonly
     */
    _id?: string;
    /** Draft post title. */
    title?: string;
    /**
     * Draft post excerpt.
     *
     * If no excerpt has been manually set, an excerpt is automatically generated from the post's text.
     * This can be retrieved using the `GENERATED_EXCERPT` fieldset.
     */
    excerpt?: string | null;
    /** Whether the draft post is marked as featured. */
    featured?: boolean | null;
    /** Category IDs of the draft post. */
    categoryIds?: string[];
    /** Draft post owner's member ID. */
    memberId?: string | null;
    /** Hashtags in the post. */
    hashtags?: string[];
    /** Whether commenting on the draft post is enabled. */
    commentingEnabled?: boolean | null;
    /**
     * Estimated reading time of the draft post (calculated automatically).
     * @readonly
     */
    minutesToRead?: number;
    /** Image placed at the top of the blog page. */
    heroImage?: string;
    /** Tag IDs the draft post is tagged with. */
    tagIds?: string[];
    /** IDs of posts related to this draft post. */
    relatedPostIds?: string[];
    /** [Pricing plan IDs](https://dev.wix.com/api/rest/wix-pricing-plans). Only relevant if a post is assigned to a specific pricing plan. */
    pricingPlanIds?: string[];
    /**
     * ID of the draft post's translations.
     *
     * All translations of a single post share the same `translationId`.
     * Available only if the [Multilingual](https://support.wix.com/en/article/wix-multilingual-an-overview) app is installed.
     */
    translationId?: string | null;
    /**
     * Language the draft post is written in.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     */
    language?: string | null;
    /**
     * Reserved for internal use.
     * @readonly
     */
    changeOrigin?: Origin;
    /**
     * Reserved for internal use.
     * @readonly
     */
    contentId?: string | null;
    /** Reserved for internal use. */
    editingSessionId?: string | null;
    /**
     * Draft Post rich content.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="image.gallery.video.audio.divider.linkButton.html.giphy.codeBlock.file.hashtag.lineSpacing.indent.link.textColor.textHighlight.heading.verticalEmbed.table.collapsibleList.poll" exampleid="72c23a25-524f-4f70-a260-4a2777b6f5d5">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    richContent?: RichContent;
    /**
     * Status of the draft post.
     * @readonly
     */
    status?: Status;
    /** Details of the draft post in review. Only relevant to posts submitted by guest writers. */
    moderationDetails?: ModerationDetails;
    /**
     * Reserved for internal use.
     * @readonly
     */
    mostRecentContributorId?: string | null;
    /**
     * Indicates if there are changes made to the draft post that have not yet been published.
     * @readonly
     */
    hasUnpublishedChanges?: boolean;
    /**
     * Date the draft post was last edited.
     * @readonly
     */
    editedDate?: Date | null;
    /**
     * Date the draft post is scheduled to be published.
     * @readonly
     */
    scheduledPublishDate?: Date | null;
    /** Reserved for internal use. */
    content?: Record<string, any> | null;
    /** Date the post was first published. */
    firstPublishedDate?: Date | null;
    /** SEO data. */
    seoData?: SeoSchema;
    /**
     * Reserved for internal use.
     * @deprecated
     * @replacedBy preview_text_paragraph
     * @targetRemovalDate 2024-06-30
     */
    paidContentParagraph?: number | null;
    /**
     * Reserved for internal use.
     * @readonly
     */
    slugs?: string[];
    /**
     * Draft post URL preview. What the URL will look like once the post is published.
     * @readonly
     */
    url?: string;
    /**
     * Date the draft post was first created.
     * @readonly
     */
    _createdDate?: Date | null;
    /** SEO slug. */
    seoSlug?: string | null;
    /** Post cover media. */
    media?: Media;
    /** Number of paragraphs to display in a paid content preview for non-paying users. */
    previewTextParagraph?: number | null;
    /**
     * Reserved for internal use.
     * @readonly
     */
    internalId?: string | null;
}
export declare enum Origin {
    UNKNOWN = "UNKNOWN",
    /** Changed by admin */
    ADMIN = "ADMIN",
    /** Categories were changed */
    ADD_CATEGORIES = "ADD_CATEGORIES",
    /** Saved automatically */
    AUTO_SAVE = "AUTO_SAVE",
    /** Copied from template */
    COPY_TEMPLATE = "COPY_TEMPLATE",
    /** Imported */
    IMPORT = "IMPORT",
    /** Imported in bulk */
    IMPORT_BULK = "IMPORT_BULK",
    /** Imported with html import */
    IMPORT_HTML = "IMPORT_HTML",
    /** Patch import */
    IMPORT_PATCH = "IMPORT_PATCH",
    /** Changed language */
    LANGUAGE_CHANGE = "LANGUAGE_CHANGE",
    /** Saved manually */
    MANUAL_SAVE = "MANUAL_SAVE",
    /** Affected by migration */
    MIGRATION = "MIGRATION",
    /** Affected by moderation */
    MODERATION = "MODERATION",
    /** Moved to trash */
    MOVE_TO_TRASH = "MOVE_TO_TRASH",
    /** Pricing plans were changed */
    PRICING_PLANS_CHANGE = "PRICING_PLANS_CHANGE",
    /** Was provisioned */
    PROVISION = "PROVISION",
    /** Was published */
    PUBLISH = "PUBLISH",
    /** Owner was reassigned */
    REASSIGN_OWNER = "REASSIGN_OWNER",
    /** Was reblogged */
    REBLOG = "REBLOG",
    /** Was restored */
    RESTORE = "RESTORE",
    /** Reverted to draft */
    REVERT_TO_DRAFT = "REVERT_TO_DRAFT",
    /** Was translated */
    TRANSLATION = "TRANSLATION",
    /** Was unpublished */
    UNPUBLISH = "UNPUBLISH",
    /** Was unscheduled */
    UNSCHEDULE = "UNSCHEDULE",
    /** New edit session started which updated editing_session_id id */
    NEW_EDIT_SESSION = "NEW_EDIT_SESSION",
    /** Was scheduled by Later */
    SCHEDULING_SERVICE_SCHEDULE = "SCHEDULING_SERVICE_SCHEDULE",
    /** Was unscheduled by Later */
    SCHEDULING_SERVICE_UNSCHEDULE = "SCHEDULING_SERVICE_UNSCHEDULE",
    /** Was published by Later */
    SCHEDULING_SERVICE_PUBLISH = "SCHEDULING_SERVICE_PUBLISH",
    /** Was scheduled */
    SCHEDULE = "SCHEDULE",
    /** Was removed from moderation */
    REMOVE_FROM_MODERATION = "REMOVE_FROM_MODERATION",
    /** Was rejected from moderation */
    REJECT_FROM_MODERATION = "REJECT_FROM_MODERATION",
    /** Was approved in moderation */
    APPROVE_IN_MODERATION = "APPROVE_IN_MODERATION",
    /** Tag was deleted */
    DELETE_TAG = "DELETE_TAG",
    /** Post was pinned */
    PIN = "PIN",
    /** Post was unpinned */
    UNPIN = "UNPIN",
    /** Saved automatically by AI tool. */
    AI_AUTO_SAVE = "AI_AUTO_SAVE"
}
export declare enum Status {
    UNKNOWN = "UNKNOWN",
    /** Status indicating the draft post is published. */
    PUBLISHED = "PUBLISHED",
    /** Status indicating the draft post is unpublished. */
    UNPUBLISHED = "UNPUBLISHED",
    /** Status indicating the draft post is scheduled for publication. */
    SCHEDULED = "SCHEDULED",
    /** Status indicating the draft post is deleted. */
    DELETED = "DELETED",
    /**
     * Deprecated. Use `IN_REVIEW` instead. Status indicating the draft post is in review.
     * Target removal date 2024-06-30
     * Reserved for internal use.
     */
    IN_MODERATION = "IN_MODERATION",
    /** Status indicating the draft post is in review. */
    IN_REVIEW = "IN_REVIEW"
}
export interface DraftPostTranslation {
    /** Post ID. */
    _id?: string;
    /** Post status. */
    status?: Status;
    /** Language the post is written in. */
    language?: string | null;
    /** Post slug. For example, 'post-slug'. */
    slug?: string | null;
    /** SEO data. */
    seoData?: SeoSchema;
    /** Post URL. */
    url?: string;
}
export interface GetTotalLikesPerMemberRequest {
    /** Member ID. */
    memberId?: string;
}
export interface GetTotalLikesPerMemberResponse {
    /** The total number of likes of the member. */
    total?: number;
}
export interface PostLiked extends PostLikedInitiatorOneOf {
    /** Member ID of person who liked the post (only returned when the member was logged in when liking the post). */
    memberId?: string | null;
    /** Visitor ID of person who liked the post when they are not logged in. */
    anonymousVisitorId?: string | null;
    /** ID of the liked post. */
    postId?: string;
}
/** @oneof */
export interface PostLikedInitiatorOneOf {
    /** Member ID of person who liked the post (only returned when the member was logged in when liking the post). */
    memberId?: string | null;
    /** Visitor ID of person who liked the post when they are not logged in. */
    anonymousVisitorId?: string | null;
}
export interface PostUnliked extends PostUnlikedInitiatorOneOf {
    /** Member ID of person who unliked the post (returned when the member was logged in when unliking the post). */
    memberId?: string | null;
    /** Visitor ID of person who unliked the post when they are not logged in. */
    anonymousVisitorId?: string | null;
    /** ID of the unliked post. */
    postId?: string;
}
/** @oneof */
export interface PostUnlikedInitiatorOneOf {
    /** Member ID of person who unliked the post (returned when the member was logged in when unliking the post). */
    memberId?: string | null;
    /** Visitor ID of person who unliked the post when they are not logged in. */
    anonymousVisitorId?: string | null;
}
export interface PostCountersUpdated extends PostCountersUpdatedInitiatorOneOf {
    /** Member ID of person who triggered the counter update */
    memberId?: string | null;
    /** Visitor ID if person that liked the post is not logged in */
    anonymousVisitorId?: string | null;
    /** ID of the post which counters were updated. */
    postId?: string;
    /** Field of the updated counter. */
    updatedCounterField?: Field;
    /** New counter value. */
    counter?: number;
}
/** @oneof */
export interface PostCountersUpdatedInitiatorOneOf {
    /** Member ID of person who triggered the counter update */
    memberId?: string | null;
    /** Visitor ID if person that liked the post is not logged in */
    anonymousVisitorId?: string | null;
}
export declare enum Field {
    /** Undefined field. */
    UNKNOWN = "UNKNOWN",
    /** Total comments field. */
    TOTAL_COMMENTS = "TOTAL_COMMENTS",
    /** Like count field. */
    LIKE_COUNT = "LIKE_COUNT",
    /** View count field. */
    VIEW_COUNT = "VIEW_COUNT",
    /** Rating count field. */
    RATING_COUNT = "RATING_COUNT"
}
export interface PostOwnerChanged {
}
export interface InitialPostsCopied {
    /** Number of posts copied. */
    count?: number;
}
export interface GetPostRequest {
    /** Post ID. */
    postId: string;
    /**
     * Reserved for internal use.
     * @deprecated __Deprecated.__ Use `fieldsets` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * List of post fields to be included in the response.
     * @replacedBy fieldsets
     * @targetRemovalDate 2024-06-30
     */
    fieldsToInclude?: PostFieldField[];
    /** List of post fields to be included in the response. By default, any fields not passed are not returned. */
    fieldsets?: PostFieldField[];
}
export interface GetPostResponse {
    /** Post info. */
    post?: Post;
}
export interface GetPostBySlugRequest {
    /** Slug of the post to retrieve. */
    slug: string;
    /**
     * Reserved for internal use.
     * @deprecated __Deprecated.__ Use `fieldsets` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * List of post fields to be included in the response.
     * @replacedBy fieldsets
     * @targetRemovalDate 2024-06-30
     */
    fieldsToInclude?: PostFieldField[];
    /** List of post fields to be included in the response. By default, any fields not passed are not returned. */
    fieldsets?: PostFieldField[];
}
export interface GetPostBySlugResponse {
    /** Post info. */
    post?: Post;
}
export interface ListPostsRequest {
    /**
     * Whether to return only featured posts.
     *
     * Default: `false`
     */
    featured?: boolean;
    /**
     * Hashtag filter.
     *
     * Pass an array of hashtags to return only posts containing any of the provided hashtags.
     * If omitted, all posts with or without hashtags are returned.
     */
    hashtags?: string[];
    /**
     * Category filter.
     *
     * Pass an array of category IDs to return only posts with any of the provided categories.
     * If omitted, all posts with or without associated categories are returned.
     */
    categoryIds?: string[];
    /**
     * Tag filter.
     *
     * Pass an array of tag IDs to return only posts with any of the provided tags.
     * If omitted, all posts with or without tags are returned.
     */
    tagIds?: string[];
    /** Sort order by descending view count, ascending or descending publish date, or default to descending by publish date with pinned posts first. */
    sort?: GetPostsSort;
    /** Pagination options. */
    paging?: BlogPaging;
    /**
     * Reserved for internal use.
     * @deprecated __Deprecated.__ Use `fieldsets` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * List of post fields to be included in the response.
     * @replacedBy fieldsets
     * @targetRemovalDate 2024-06-30
     */
    fieldsToInclude?: PostFieldField[];
    /**
     * Language filter.
     *
     *
     * 2-letter language code in [ISO 639-1 alpha-2](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format.
     */
    language?: string | null;
    /** Post owner's member ID. */
    memberId?: string | null;
    /** List of post fields to be included in the response. By default, any fields not passed are not returned. */
    fieldsets?: PostFieldField[];
}
export interface ListPostsResponse {
    /** List of posts. */
    posts?: Post[];
    /** Details on the paged set of results returned. */
    metaData?: MetaData;
}
export interface QueryPostsRequest {
    /**
     * __Deprecated.__ Use `query` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * Pagination options.
     * @deprecated __Deprecated.__ Use `query` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * Pagination options.
     * @replacedBy query
     * @targetRemovalDate 2024-06-30
     */
    paging?: BlogPaging;
    /**
     * __Deprecated.__ Use `query` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * Filter object.
     * @deprecated __Deprecated.__ Use `query` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * Filter object.
     * @replacedBy query
     * @targetRemovalDate 2024-06-30
     */
    filter?: Record<string, any> | null;
    /**
     * __Deprecated.__ Use `query` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * Sorting options. For a list of sortable fields, see [Field Support for Filtering and Sorting](https://dev.wix.com/docs/rest/business-solutions/blog/posts-stats/filter-and-sort).
     * @deprecated __Deprecated.__ Use `query` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * Sorting options. For a list of sortable fields, see [Field Support for Filtering and Sorting](https://dev.wix.com/docs/rest/business-solutions/blog/posts-stats/filter-and-sort).
     * @replacedBy query
     * @targetRemovalDate 2024-06-30
     */
    sort?: Sorting[];
    /**
     * Reserved for internal use.
     * @deprecated __Deprecated.__ Use `fieldsets` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * List of post fields to be included in the response.
     * @replacedBy fieldsets
     * @targetRemovalDate 2024-06-30
     */
    fieldsToInclude?: PostFieldField[];
    /** Query options. */
    query?: PlatformQuery;
    /** List of post fields to be included in the response. By default, any fields not passed are not returned. */
    fieldsets?: PostFieldField[];
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
export interface PlatformQueryPagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface QueryPostsResponse {
    /** List of posts. */
    posts?: Post[];
    /**
     * __Deprecated.__ Use `pagingMetadata` instead.
     * This property will be removed on June 30, 2023.
     *
     * Details on the paged set of results returned.
     * @deprecated __Deprecated.__ Use `pagingMetadata` instead.
     * This property will be removed on June 30, 2023.
     *
     * Details on the paged set of results returned.
     * @replacedBy pagingMetadata
     * @targetRemovalDate 2024-06-30
     */
    metaData?: MetaData;
    /** Details on the paged set of results returned. */
    pagingMetadata?: PagingMetadataV2;
}
export interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
export interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
export interface GetPostMetricsRequest {
    /** Post ID. */
    postId: string;
}
export interface GetPostMetricsResponse {
    /** Post metrics. */
    metrics?: Metrics;
}
export interface BulkGetPostMetricsRequest {
    /** Post IDs. */
    postIds?: string[];
}
export interface BulkGetPostMetricsResponse {
    /** Map of post.id to metrics */
    metrics?: Record<string, Metrics>;
}
export interface ViewPostRequest {
    /** Post ID. */
    postId?: string;
}
export interface ViewPostResponse {
    /** Total number of post views */
    views?: number;
}
export interface LikePostRequest {
    /** Post ID. */
    postId?: string;
    /**
     * List of additional post fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the post’s base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the post’s base fields are returned.
     */
    fieldsets?: PostFieldField[];
}
export interface LikePostResponse {
    /** Post info. */
    post?: Post;
}
export interface UnlikePostRequest {
    /** Post ID. */
    postId?: string;
    /**
     * List of additional post fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the post’s base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the post’s base fields are returned.
     */
    fieldsets?: PostFieldField[];
}
export interface UnlikePostResponse {
    /** Post info. */
    post?: Post;
}
export interface PinPostRequest {
    /** Post ID. */
    postId?: string;
    /**
     * List of additional post fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the post’s base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the post’s base fields are returned.
     */
    fieldsets?: PostFieldField[];
}
export interface PinPostResponse {
    /** Post info. */
    post?: Post;
}
export interface UnpinPostRequest {
    /** Post ID. */
    postId?: string;
    /**
     * List of additional post fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the post’s base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the post’s base fields are returned.
     */
    fieldsets?: PostFieldField[];
}
export interface UnpinPostResponse {
    /** Post info. */
    post?: Post;
}
export interface ListPostsArchiveRequest {
    /** Month */
    month?: number | null;
    /** Year */
    year?: number;
    /** Time zone */
    timeZone?: string | null;
    /** Pagination options. */
    paging?: BlogPaging;
    /**
     * Language filter.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * Pass a language to only receive posts that are in that language.
     * If omitted, posts in all languages are returned.
     */
    language?: string | null;
    /**
     * List of additional post fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the post’s base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the post’s base fields are returned.
     */
    fieldsets?: PostFieldField[];
}
export interface ListPostsArchiveResponse {
    /** List of posts. */
    posts?: Post[];
    /** Details on the paged set of results returned. */
    metaData?: MetaData;
    /** Details on the paged set of results returned. */
    pagingMetadata?: PagingMetadataV2;
}
export interface BulkGetPostReactionsRequest {
    /** Post IDs. */
    postIds?: string[];
}
export interface BulkGetPostReactionsResponse {
    /** Map of post.id to reactions */
    reactionsMap?: Record<string, Reactions>;
}
export interface Reactions {
    /**
     * Is post liked by the current user
     * @readonly
     */
    liked?: boolean;
}
/** Get Blog Publications Count Stats request */
export interface QueryPublicationsCountStatsRequest {
    /** Start of time range to return, in ISO 8601 date and time format. */
    rangeStart?: Date | null;
    /** Non-inclusive end of time range to return, in ISO 8601 date and time format. */
    rangeEnd?: Date | null;
    /** Order of the returned results. */
    order?: QueryPublicationsCountStatsRequestOrder;
    /** Number of months to include in the response. */
    months?: number;
    /**
     * Language filter
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     */
    language?: string | null;
    /** Timezone of the client. */
    timeZone?: string | null;
}
export declare enum QueryPublicationsCountStatsRequestOrder {
    UNKNOWN = "UNKNOWN",
    OLDEST = "OLDEST",
    NEWEST = "NEWEST"
}
/** Get Blog Publications Count Stats response */
export interface QueryPublicationsCountStatsResponse {
    /** Chronologically ordered list of publications. */
    stats?: PeriodPublicationsCount[];
}
/** Publications count for a specific time period */
export interface PeriodPublicationsCount {
    /** Start of time range in ISO 8601 date and time format. */
    periodStart?: Date | null;
    /** Number of posts published during this month. */
    publicationsCount?: number;
}
/** Get Blog Post Count Stats request */
export interface QueryPostCountStatsRequest {
    /** Start of time range to return, in ISO 8601 date and time format. */
    rangeStart?: Date | null;
    /**
     * __Deprecated.__ Use `months` instead.
     * This property will be removed on June 30, 2023.
     *
     * Non-inclusive end of time range to return, in ISO 8601 date and time format.
     * @deprecated __Deprecated.__ Use `months` instead.
     * This property will be removed on June 30, 2023.
     *
     * Non-inclusive end of time range to return, in ISO 8601 date and time format.
     * @replacedBy months
     * @targetRemovalDate 2024-06-30
     */
    rangeEnd?: Date | null;
    /**
     * Order of returned results.
     *
     * - `OLDEST`: posts by date in ascending order.
     * - `NEWEST`: posts by date in descending order.
     *
     * Default: `OLDEST`
     */
    order?: Order;
    /** Number of months to include in response. */
    months?: number;
    /**
     * Language filter.
     *
     *
     * 2-letter language code in [ISO 639-1 alpha-2](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format.
     */
    language?: string | null;
    /**
     * Time zone to use when calculating the start of the month.
     *
     * [UTC timezone offset](https://en.wikipedia.org/wiki/List_of_UTC_offsets) format. For example, New York time zone is `-05`.
     */
    timeZone?: string | null;
}
export declare enum Order {
    UNKNOWN = "UNKNOWN",
    OLDEST = "OLDEST",
    NEWEST = "NEWEST"
}
/** Get Blog Post Count Stats response */
export interface QueryPostCountStatsResponse {
    /** List of posts in specified order. */
    stats?: PeriodPostCount[];
}
/** Post count for a specific time period */
export interface PeriodPostCount {
    /** Start of time range in ISO 8601 date and time format. */
    periodStart?: Date | null;
    /** Number of posts published during this month. */
    postCount?: number;
}
export interface GetTotalPublicationsRequest {
    /** Language filter */
    language?: string | null;
}
export interface GetTotalPublicationsResponse {
    /** Total amount of publications. */
    total?: number;
}
export interface GetTotalPostsRequest {
    /**
     * Language filter.
     *
     *
     * 2-letter language code in [ISO 639-1 alpha-2](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format.
     */
    language?: string | null;
}
export interface GetTotalPostsResponse {
    /** Total amount of published posts. */
    total?: number;
}
interface CoverMediaNonNullableFields {
    image: string;
    video: string;
    enabled: boolean;
    displayed: boolean;
    custom: boolean;
}
interface PostCountInfoNonNullableFields {
    comments: number;
    likes: number;
    views: number;
}
interface MetricsNonNullableFields {
    comments: number;
    likes: number;
    views: number;
    totalRatings: number;
    averageRating: number;
}
interface TagNonNullableFields {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields[];
}
interface SeoSchemaNonNullableFields {
    tags: TagNonNullableFields[];
    settings?: SettingsNonNullableFields;
}
interface PluginContainerDataWidthNonNullableFields {
    size: WidthType;
}
interface PluginContainerDataNonNullableFields {
    width?: PluginContainerDataWidthNonNullableFields;
    alignment: PluginContainerDataAlignment;
}
interface LinkNonNullableFields {
    url: string;
    anchor: string;
    target: Target;
}
interface ButtonDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    type: Type;
    link?: LinkNonNullableFields;
}
interface TextStyleNonNullableFields {
    textAlignment: TextAlignment;
}
interface CodeBlockDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface DividerDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    lineStyle: LineStyle;
    width: Width;
    alignment: Alignment;
}
interface PDFSettingsNonNullableFields {
    viewMode: ViewMode;
}
interface FileDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    pdfSettings?: PDFSettingsNonNullableFields;
}
interface ImageNonNullableFields {
    link?: LinkNonNullableFields;
}
interface ItemNonNullableFields {
    image?: ImageNonNullableFields;
}
interface LayoutNonNullableFields {
    type: LayoutType;
    orientation: Orientation;
}
interface ItemStyleNonNullableFields {
    crop: Crop;
}
interface ThumbnailsNonNullableFields {
    placement: ThumbnailsAlignment;
}
interface GalleryOptionsNonNullableFields {
    layout?: LayoutNonNullableFields;
    item?: ItemStyleNonNullableFields;
    thumbnails?: ThumbnailsNonNullableFields;
}
interface GalleryDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    items: ItemNonNullableFields[];
    options?: GalleryOptionsNonNullableFields;
}
interface GIFDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    height: number;
    width: number;
    gifType: GIFType;
}
interface HeadingDataNonNullableFields {
    level: number;
    textStyle?: TextStyleNonNullableFields;
}
interface HTMLDataNonNullableFields {
    url: string;
    html: string;
    containerData?: PluginContainerDataNonNullableFields;
    source: Source;
}
interface ImageDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    link?: LinkNonNullableFields;
}
interface LinkPreviewDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    link?: LinkNonNullableFields;
}
interface MapSettingsNonNullableFields {
    mapType: MapType;
}
interface MapDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    mapSettings?: MapSettingsNonNullableFields;
}
interface ParagraphDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface PermissionsNonNullableFields {
    view: ViewRole;
    vote: VoteRole;
}
interface PollSettingsNonNullableFields {
    permissions?: PermissionsNonNullableFields;
}
interface PollNonNullableFields {
    settings?: PollSettingsNonNullableFields;
}
interface PollLayoutNonNullableFields {
    type: PollLayoutType;
    direction: PollLayoutDirection;
}
interface PollDataLayoutNonNullableFields {
    poll?: PollLayoutNonNullableFields;
}
interface BackgroundNonNullableFields {
    type: BackgroundType;
}
interface PollDesignNonNullableFields {
    background?: BackgroundNonNullableFields;
}
interface DesignNonNullableFields {
    poll?: PollDesignNonNullableFields;
}
interface PollDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    poll?: PollNonNullableFields;
    layout?: PollDataLayoutNonNullableFields;
    design?: DesignNonNullableFields;
}
interface AnchorDataNonNullableFields {
    anchor: string;
}
interface LinkDataNonNullableFields {
    link?: LinkNonNullableFields;
}
interface MentionDataNonNullableFields {
    name: string;
    slug: string;
}
interface FontSizeDataNonNullableFields {
    unit: FontType;
}
interface DecorationNonNullableFields {
    anchorData?: AnchorDataNonNullableFields;
    linkData?: LinkDataNonNullableFields;
    mentionData?: MentionDataNonNullableFields;
    fontSizeData?: FontSizeDataNonNullableFields;
    type: DecorationType;
}
interface TextDataNonNullableFields {
    text: string;
    decorations: DecorationNonNullableFields[];
}
interface AppEmbedDataNonNullableFields {
    type: AppType;
}
interface VideoDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface EmbedDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface CollapsibleListDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    initialExpandedItems: InitialExpandedItems;
    direction: Direction;
}
interface DimensionsNonNullableFields {
    colsWidthRatio: number[];
    rowsHeight: number[];
    colsMinWidth: number[];
}
interface TableDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    dimensions?: DimensionsNonNullableFields;
}
interface CellStyleNonNullableFields {
    verticalAlignment: VerticalAlignment;
}
interface TableCellDataNonNullableFields {
    cellStyle?: CellStyleNonNullableFields;
}
interface AudioDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface OrderedListDataNonNullableFields {
    indentation: number;
}
interface BulletedListDataNonNullableFields {
    indentation: number;
}
interface BlockquoteDataNonNullableFields {
    indentation: number;
}
interface CaptionDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface NodeNonNullableFields {
    buttonData?: ButtonDataNonNullableFields;
    codeBlockData?: CodeBlockDataNonNullableFields;
    dividerData?: DividerDataNonNullableFields;
    fileData?: FileDataNonNullableFields;
    galleryData?: GalleryDataNonNullableFields;
    gifData?: GIFDataNonNullableFields;
    headingData?: HeadingDataNonNullableFields;
    htmlData?: HTMLDataNonNullableFields;
    imageData?: ImageDataNonNullableFields;
    linkPreviewData?: LinkPreviewDataNonNullableFields;
    mapData?: MapDataNonNullableFields;
    paragraphData?: ParagraphDataNonNullableFields;
    pollData?: PollDataNonNullableFields;
    textData?: TextDataNonNullableFields;
    appEmbedData?: AppEmbedDataNonNullableFields;
    videoData?: VideoDataNonNullableFields;
    embedData?: EmbedDataNonNullableFields;
    collapsibleListData?: CollapsibleListDataNonNullableFields;
    tableData?: TableDataNonNullableFields;
    tableCellData?: TableCellDataNonNullableFields;
    audioData?: AudioDataNonNullableFields;
    orderedListData?: OrderedListDataNonNullableFields;
    bulletedListData?: BulletedListDataNonNullableFields;
    blockquoteData?: BlockquoteDataNonNullableFields;
    captionData?: CaptionDataNonNullableFields;
    type: NodeType;
    _id: string;
    nodes: NodeNonNullableFields[];
}
interface MetadataNonNullableFields {
    version: number;
}
interface TextNodeStyleNonNullableFields {
    decorations: DecorationNonNullableFields[];
}
interface DocumentStyleNonNullableFields {
    headerOne?: TextNodeStyleNonNullableFields;
    headerTwo?: TextNodeStyleNonNullableFields;
    headerThree?: TextNodeStyleNonNullableFields;
    headerFour?: TextNodeStyleNonNullableFields;
    headerFive?: TextNodeStyleNonNullableFields;
    headerSix?: TextNodeStyleNonNullableFields;
    paragraph?: TextNodeStyleNonNullableFields;
    blockquote?: TextNodeStyleNonNullableFields;
    codeBlock?: TextNodeStyleNonNullableFields;
}
interface RichContentNonNullableFields {
    nodes: NodeNonNullableFields[];
    metadata?: MetadataNonNullableFields;
    documentStyle?: DocumentStyleNonNullableFields;
}
interface ModerationDetailsNonNullableFields {
    submittedBy: string;
    status: ModerationStatusStatus;
}
interface WixMediaNonNullableFields {
    image: string;
    videoV2: string;
}
interface EmbedThumbnailNonNullableFields {
    url: string;
    width: number;
    height: number;
}
interface EmbedVideoNonNullableFields {
    url: string;
    width: number;
    height: number;
}
interface EmbedMediaNonNullableFields {
    thumbnail?: EmbedThumbnailNonNullableFields;
    video?: EmbedVideoNonNullableFields;
}
interface MediaNonNullableFields {
    wixMedia?: WixMediaNonNullableFields;
    embedMedia?: EmbedMediaNonNullableFields;
    displayed: boolean;
    custom: boolean;
}
interface PostTranslationNonNullableFields {
    _id: string;
    seoData?: SeoSchemaNonNullableFields;
    url: string;
}
interface PostNonNullableFields {
    _id: string;
    title: string;
    excerpt: string;
    url: string;
    slug: string;
    featured: boolean;
    pinned: boolean;
    categoryIds: string[];
    coverMedia?: CoverMediaNonNullableFields;
    memberId: string;
    hashtags: string[];
    commentingEnabled: boolean;
    postCountInfo?: PostCountInfoNonNullableFields;
    minutesToRead: number;
    heroImage: string;
    tagIds: string[];
    relatedPostIds: string[];
    pricingPlanIds: string[];
    metrics?: MetricsNonNullableFields;
    seoData?: SeoSchemaNonNullableFields;
    richContent?: RichContentNonNullableFields;
    preview: boolean;
    moderationDetails?: ModerationDetailsNonNullableFields;
    media?: MediaNonNullableFields;
    hasUnpublishedChanges: boolean;
    translations: PostTranslationNonNullableFields[];
    customExcerpt: boolean;
    internalCategoryIds: string[];
    internalRelatedPostIds: string[];
}
export interface GetPostResponseNonNullableFields {
    post?: PostNonNullableFields;
}
export interface GetPostBySlugResponseNonNullableFields {
    post?: PostNonNullableFields;
}
interface MetaDataNonNullableFields {
    count: number;
    offset: number;
    total: number;
}
export interface ListPostsResponseNonNullableFields {
    posts: PostNonNullableFields[];
    metaData?: MetaDataNonNullableFields;
}
export interface QueryPostsResponseNonNullableFields {
    posts: PostNonNullableFields[];
    metaData?: MetaDataNonNullableFields;
}
export interface GetPostMetricsResponseNonNullableFields {
    metrics?: MetricsNonNullableFields;
}
interface PeriodPostCountNonNullableFields {
    postCount: number;
}
export interface QueryPostCountStatsResponseNonNullableFields {
    stats: PeriodPostCountNonNullableFields[];
}
export interface GetTotalPostsResponseNonNullableFields {
    total: number;
}
export interface BaseEventMetadata {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
export interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
export interface PostCreatedEnvelope {
    entity: Post;
    metadata: EventMetadata;
}
/**
 * Triggered when a post is created.
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @permissionId BLOG.READ-PUBLICATION
 * @webhook
 * @eventType wix.blog.v3.post_created
 * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.v3.PostService
 * @slug created
 */
export declare function onPostCreated(handler: (event: PostCreatedEnvelope) => void | Promise<void>): void;
export interface PostDeletedEnvelope {
    entity: Post;
    metadata: EventMetadata;
}
/**
 * Triggered when a post is deleted.
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @permissionId BLOG.READ-PUBLICATION
 * @webhook
 * @eventType wix.blog.v3.post_deleted
 * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.v3.PostService
 * @slug deleted
 */
export declare function onPostDeleted(handler: (event: PostDeletedEnvelope) => void | Promise<void>): void;
export interface PostLikedEnvelope {
    data: PostLiked;
    metadata: EventMetadata;
}
/**
 * Triggered when a post is liked.
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @permissionId BLOG.READ-PUBLICATION
 * @webhook
 * @eventType wix.blog.v3.post_liked
 * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.v3.PostService
 * @slug liked
 */
export declare function onPostLiked(handler: (event: PostLikedEnvelope) => void | Promise<void>): void;
export interface PostUnlikedEnvelope {
    data: PostUnliked;
    metadata: EventMetadata;
}
/**
 * Triggered when a post is unliked.
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @permissionId BLOG.READ-PUBLICATION
 * @webhook
 * @eventType wix.blog.v3.post_unliked
 * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.v3.PostService
 * @slug unliked
 */
export declare function onPostUnliked(handler: (event: PostUnlikedEnvelope) => void | Promise<void>): void;
export interface PostUpdatedEnvelope {
    entity: Post;
    metadata: EventMetadata;
}
/**
 * Triggered when a post is updated.
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @permissionId BLOG.READ-PUBLICATION
 * @webhook
 * @eventType wix.blog.v3.post_updated
 * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.v3.PostService
 * @slug updated
 */
export declare function onPostUpdated(handler: (event: PostUpdatedEnvelope) => void | Promise<void>): void;
/**
 * Gets a post by the specified ID.
 *
 *
 * The `getPost()` function returns a Promise that resolves to a post whose ID matches the given ID.
 *
 * @param postId - Post ID.
 * @public
 * @requiredField postId
 * @param options - Options specifying which fields to return.
 * @permissionId BLOG.READ-PUBLICATION
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - The requested post.
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.PostService.GetPost
 */
export declare function getPost(postId: string, options?: GetPostOptions): Promise<GetPostResponse & GetPostResponseNonNullableFields>;
export interface GetPostOptions {
    /**
     * @internal
     * @deprecated __Deprecated.__ Use `fieldsets` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * List of post fields to be included in the response.
     * @replacedBy fieldsets
     * @targetRemovalDate 2024-06-30
     */
    fieldsToInclude?: PostFieldField[];
    /** List of post fields to be included in the response. By default, any fields not passed are not returned. */
    fieldsets?: PostFieldField[];
}
/**
 * Gets a post by the provided slug.
 *
 *
 * The `getPostBySlug()` function returns a Promise that resolves to a post whose slug matches the given slug.
 *
 * The `slug` is the end of a post's URL that refers to a specific post. For example, if a post's URL is `https:/example.com/blog/post/my-post-slug`, the slug is `my-post-slug`. The slug is case-sensitive, and is generally derived from the post title, unless specified otherwise.
 * @public
 * @requiredField slug
 * @param options - Options specifying which fields to return.
 * @param slug - Slug of the post to retrieve.
 *
 * The end of a post's URL, for example, `https:/example.com/blog/post/my-post-slug`. Case sensitive and generally based on the post title if not specified.
 * @permissionId BLOG.READ-PUBLICATION
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - The requested post.
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.PostService.GetPostBySlug
 */
export declare function getPostBySlug(slug: string, options?: GetPostBySlugOptions): Promise<GetPostBySlugResponse & GetPostBySlugResponseNonNullableFields>;
export interface GetPostBySlugOptions {
    /**
     * @internal
     * @deprecated __Deprecated.__ Use `fieldsets` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * List of post fields to be included in the response.
     * @replacedBy fieldsets
     * @targetRemovalDate 2024-06-30
     */
    fieldsToInclude?: PostFieldField[];
    /** List of post fields to be included in the response. By default, any fields not passed are not returned. */
    fieldsets?: PostFieldField[];
}
/**
 * Retrieves a list of published posts.
 *
 *
 * The `listPosts()` function returns a Promise that resolves to a list of up to 100 published posts.
 *
 * Using the `options` parameter, you can filter your list of posts, set the amount of posts to be returned, and sort your list in a specified order.
 *
 * By default, the list is sorted by `firstPublishedDate` in descending order, and the amount of posts returned is 50.
 * @public
 * @param options - Sort, filter, and paging options.
 * @permissionId BLOG.READ-PUBLICATION
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - List of retrieved posts.
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.PostService.ListPosts
 */
export declare function listPosts(options?: ListPostsOptions): Promise<ListPostsResponse & ListPostsResponseNonNullableFields>;
export interface ListPostsOptions {
    /** Featured filter. Whether to return only featured posts. */
    featured?: boolean;
    /**
     * List of hashtags to filter for.
     *
     *
     * Default: All hashtags
     */
    hashtags?: string[];
    /**
     * List of category IDs to filter for.
     *
     *
     * Default: All categories
     */
    categoryIds?: string[];
    /**
     * List of [tag IDs](https://www.wix.com/velo/reference/wix-blog-backend/tags) to filter for.
     *
     *
     * Default: All tags
     */
    tagIds?: string[];
    /**
     * Sort order.
     *
     * Sort by one of the following:
     *  - `'VIEW_COUNT'` descending view count
     *  - `'LIKE_COUNT'` descending like count
     *  - `'PUBLISHED_DATE_ASC'` ascending published date
     *  - `'PUBLISHED_DATE_DESC'` descending published date
     *  - `'TITLE_ASC'` ascending title
     *  - `'TITLE_DESC'` descending title
     *
     *  Default: `'PUBLISHED_DATE_DESC'`
     */
    sort?: GetPostsSort;
    /** Pagination options. */
    paging?: BlogPaging;
    /**
     * @internal
     * @deprecated __Deprecated.__ Use `fieldsets` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * List of post fields to be included in the response.
     * @replacedBy fieldsets
     * @targetRemovalDate 2024-06-30
     */
    fieldsToInclude?: PostFieldField[];
    /**
     * Language filter.
     *
     *
     * 2-letter language code in [ISO 639-1 alpha-2](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format.
     */
    language?: string | null;
    /**
     * Member ID to filter for.
     *
     *
     * Default: All members
     */
    memberId?: string | null;
    /** List of post fields to be included in the response. By default, any fields not passed are not returned. */
    fieldsets?: PostFieldField[];
}
/**
 * Creates a query to retrieve a list of posts.
 *
 *
 * The `queryPosts()` function builds a query to retrieve a list of up to 100 posts, and returns a [`PostsQueryBuilder`](https://www.wix.com/velo/reference/wix-blog-backend/posts/postsquerybuilder) object.
 *
 * The returned object contains the query definition which is typically used to run the query using the [`find()`](https://www.wix.com/velo/reference/wix-blog-backend/posts/postsquerybuilder/find) function.
 *
 * You can refine the query by chaining `PostsQueryBuilder` functions onto the query. `PostsQueryBuilder` functions enable you to sort, filter, and control the results that `queryPosts()` returns.
 *
 * `queryPosts()` runs with these `PostsQueryBuilder` defaults that can be overridden:
 * + [`limit(50)`](https://www.wix.com/velo/reference/wix-blog-backend/posts/postsquerybuilder/limit)
 * + [`descending('firstPublishedDate')`](https://www.wix.com/velo/reference/wix-blog-backend/posts/postsquerybuilder/descending)
 *
 * Note that the default limit is `'50'`, but the max limit is `'100'`.
 *
 * To learn how to query posts, refer to the table below.
 *
 * The following `PostsQueryBuilder` functions are supported for the `queryPosts()` function. For a full description of the Posts object, see the object returned for the [`items`](https://www.wix.com/velo/reference/wix-blog-backend/posts/postsqueryresult/items) property in [`PostsQueryResult`](https://www.wix.com/velo/reference/wix-blog-backend/posts/postsqueryresult).
 * @public
 * @param options - Options specifying which fields to return.
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @permissionId BLOG.READ-PUBLICATION
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.PostService.QueryPosts
 */
export declare function queryPosts(options?: QueryPostsOptions): PostsQueryBuilder;
export interface QueryPostsOptions {
    /**
     * @internal
     * @deprecated __Deprecated.__ Use `query` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * Pagination options.
     * @replacedBy query
     * @targetRemovalDate 2024-06-30
     */
    paging?: BlogPaging | undefined;
    /**
     * @internal
     * @deprecated __Deprecated.__ Use `query` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * Filter object.
     * @replacedBy query
     * @targetRemovalDate 2024-06-30
     */
    filter?: Record<string, any> | null | undefined;
    /**
     * @internal
     * @deprecated __Deprecated.__ Use `query` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * Sorting options. For a list of sortable fields, see [Field Support for Filtering and Sorting](https://dev.wix.com/docs/rest/business-solutions/blog/posts-stats/filter-and-sort).
     * @replacedBy query
     * @targetRemovalDate 2024-06-30
     */
    sort?: Sorting[] | undefined;
    /**
     * @internal
     * @deprecated __Deprecated.__ Use `fieldsets` instead.
     * This parameter will be removed on June 30, 2023.
     *
     * List of post fields to be included in the response.
     * @replacedBy fieldsets
     * @targetRemovalDate 2024-06-30
     */
    fieldsToInclude?: PostFieldField[] | undefined;
    /** List of post fields to be included in the response. By default, any fields not passed are not returned. */
    fieldsets?: PostFieldField[] | undefined;
}
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
export interface PostsQueryResult extends QueryCursorResult {
    items: Post[];
    query: PostsQueryBuilder;
    next: () => Promise<PostsQueryResult>;
    prev: () => Promise<PostsQueryResult>;
}
export interface PostsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    eq: (propertyName: '_id' | 'title' | 'firstPublishedDate' | 'lastPublishedDate' | 'slug' | 'featured' | 'pinned' | 'coverMedia.enabled' | 'memberId' | 'commentingEnabled' | 'minutesToRead' | 'translationId' | 'language' | 'metrics.comments' | 'metrics.likes' | 'metrics.views', value: any) => PostsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ne: (propertyName: '_id' | 'title' | 'firstPublishedDate' | 'lastPublishedDate' | 'slug' | 'featured' | 'pinned' | 'coverMedia.enabled' | 'memberId' | 'commentingEnabled' | 'minutesToRead' | 'translationId' | 'language' | 'metrics.comments' | 'metrics.likes' | 'metrics.views', value: any) => PostsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ge: (propertyName: 'firstPublishedDate' | 'lastPublishedDate' | 'minutesToRead' | 'metrics.comments' | 'metrics.likes' | 'metrics.views', value: any) => PostsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    gt: (propertyName: 'firstPublishedDate' | 'lastPublishedDate' | 'minutesToRead' | 'metrics.comments' | 'metrics.likes' | 'metrics.views', value: any) => PostsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    le: (propertyName: 'firstPublishedDate' | 'lastPublishedDate' | 'minutesToRead' | 'metrics.comments' | 'metrics.likes' | 'metrics.views', value: any) => PostsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    lt: (propertyName: 'firstPublishedDate' | 'lastPublishedDate' | 'minutesToRead' | 'metrics.comments' | 'metrics.likes' | 'metrics.views', value: any) => PostsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     */
    startsWith: (propertyName: 'title', value: string) => PostsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     */
    hasSome: (propertyName: '_id' | 'title' | 'slug' | 'categoryIds' | 'memberId' | 'hashtags' | 'tagIds' | 'pricingPlanIds' | 'language', value: any[]) => PostsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     */
    hasAll: (propertyName: 'categoryIds' | 'hashtags' | 'tagIds' | 'pricingPlanIds', value: any[]) => PostsQueryBuilder;
    in: (propertyName: '_id' | 'title' | 'firstPublishedDate' | 'lastPublishedDate' | 'minutesToRead' | 'translationId' | 'language' | 'metrics.comments' | 'metrics.likes' | 'metrics.views', value: any) => PostsQueryBuilder;
    exists: (propertyName: 'title' | 'translationId' | 'language', value: boolean) => PostsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    ascending: (...propertyNames: Array<'_id' | 'title' | 'firstPublishedDate' | 'lastPublishedDate' | 'slug' | 'featured' | 'pinned' | 'commentingEnabled' | 'metrics.comments' | 'metrics.likes' | 'metrics.views'>) => PostsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    descending: (...propertyNames: Array<'_id' | 'title' | 'firstPublishedDate' | 'lastPublishedDate' | 'slug' | 'featured' | 'pinned' | 'commentingEnabled' | 'metrics.comments' | 'metrics.likes' | 'metrics.views'>) => PostsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */
    limit: (limit: number) => PostsQueryBuilder;
    /** @param cursor - A pointer to specific record */
    skipTo: (cursor: string) => PostsQueryBuilder;
    find: () => Promise<PostsQueryResult>;
}
/**
 * Gets a specified post's metrics.
 *
 *
 * The `getPostMetrics()` function returns a Promise that resolves to the specified post's metrics.
 *
 * A post's metrics include the comments, likes, and views the post receives.
 * @param postId - Post ID.
 * @public
 * @requiredField postId
 * @permissionId BLOG.READ-PUBLICATION
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Post metrics.
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.PostService.GetPostMetrics
 */
export declare function getPostMetrics(postId: string): Promise<GetPostMetricsResponse & GetPostMetricsResponseNonNullableFields>;
/**
 * Retrieves the number of published posts per month within a specified time range.
 *
 *
 * The `queryPostCountStats()` function returns a Promise that resolves to the number of posts per month within the specified time range.
 *
 * You can set the time range using the `rangeStart` and `months` properties. The time range always starts on the 1st day of the month set in `rangeStart` and includes the number of `months` following `rangeStart`. For example, if `rangeStart` is set to `'2022-03-13'` and `months` is set to `4`, the time range will be from `'2022-03-01'` until `'2022-06-30'`. The time range ends on the last day of the month.
 *
 * >**Note:** If there are no published posts in a specific month, that month is not included in the response. For example, let's say a blog has `0` posts dated in February 2022. If `rangeStart` is set to `'2022-01-01'` and `months` is set to `3`, the response includes `postCount` values for January and March, but not February.
 * @public
 * @documentationMaturity preview
 * @param options - Options specifying time frame, sort, and filter.
 * @permissionId BLOG.READ-PUBLICATION
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Post count stats.
 * @fqn com.wixpress.npm.communities.platformized.blog.BlogStatsService.QueryPostCountStats
 */
export declare function queryPostCountStats(options?: QueryPostCountStatsOptions): Promise<QueryPostCountStatsResponse & QueryPostCountStatsResponseNonNullableFields>;
export interface QueryPostCountStatsOptions {
    /** Start of time range to return, in ISO 8601 date and time format. */
    rangeStart?: Date | null;
    /**
     * Reserved for internal use.
     * @deprecated __Deprecated.__ Use `months` instead.
     * This property will be removed on June 30, 2023.
     *
     * Non-inclusive end of time range to return, in ISO 8601 date and time format.
     * @replacedBy months
     * @targetRemovalDate 2024-06-30
     */
    rangeEnd?: Date | null;
    /**
     * Sort order.
     * Use `'ASC'` for ascending order or `'DESC'` for descending order.
     *
     * Default: `ASC`
     */
    order?: Order;
    /** Number of months to include in response. */
    months?: number;
    /**
     * Language filter.
     *
     *
     * 2-letter language code in [ISO 639-1 alpha-2](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format.
     */
    language?: string | null;
    /**
     * Time zone to use when calculating the start of the month.
     *
     * [UTC timezone offset](https://en.wikipedia.org/wiki/List_of_UTC_offsets) format. For example, New York time zone is `-05`.
     */
    timeZone?: string | null;
}
/**
 * Gets the total amount of published posts on the blog.
 *
 *
 * The `getTotalPosts()` function returns a Promise that resolves to the total amount of published posts on your blog's site.
 *
 *
 * You can use the `language` option to filter posts for a specified language.
 * @public
 * @documentationMaturity preview
 * @param options - Language Options.
 * @permissionId BLOG.READ-PUBLICATION
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Total number of posts.
 * @fqn com.wixpress.npm.communities.platformized.blog.BlogStatsService.GetTotalPosts
 */
export declare function getTotalPosts(options?: GetTotalPostsOptions): Promise<GetTotalPostsResponse & GetTotalPostsResponseNonNullableFields>;
export interface GetTotalPostsOptions {
    /**
     * Language filter.
     *
     *
     * 2-letter language code in [ISO 639-1 alpha-2](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format.
     */
    language?: string | null;
}
export {};
