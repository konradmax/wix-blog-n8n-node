"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDeletedDraftPost = exports.listDraftPosts = exports.bulkDeleteDraftPosts = exports.removeFromTrashBin = exports.deleteDraftPost = exports.updateDraftPost = exports.getDraftPost = exports.listDeletedDraftPosts = exports.bulkUpdateDraftPosts = exports.bulkCreateDraftPosts = exports.createDraftPost = exports.TotalDraftPostsGroupingField = exports.WebhookIdentityType = exports.SortOrder = exports.GetDraftPostsSort = exports.Action = exports.Field = exports.Type = exports.ModerationStatusStatus = exports.Status = exports.NullValue = exports.VerticalAlignment = exports.Direction = exports.InitialExpandedItems = exports.AppType = exports.FontType = exports.DecorationType = exports.BackgroundType = exports.PollLayoutDirection = exports.PollLayoutType = exports.VoteRole = exports.ViewRole = exports.MapType = exports.Source = exports.GIFType = exports.ThumbnailsAlignment = exports.Crop = exports.Orientation = exports.LayoutType = exports.ViewMode = exports.Alignment = exports.Width = exports.LineStyle = exports.TextAlignment = exports.Target = exports.ButtonDataType = exports.PluginContainerDataAlignment = exports.WidthType = exports.NodeType = exports.Origin = void 0;
exports.publishDraftPost = exports.queryDraftPosts = exports.restoreFromTrashBin = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixBlogV3Draft = __importStar(require("./blog-v3-draft-draft-posts.http.js"));
// @ts-ignore
const image_1 = require("@wix/sdk-runtime/transformations/image");
const image_2 = require("@wix/sdk-runtime/transformations/image");
const video_v2_1 = require("@wix/sdk-runtime/transformations/video-v2");
const video_v2_2 = require("@wix/sdk-runtime/transformations/video-v2");
const video_1 = require("@wix/sdk-runtime/transformations/video");
const video_2 = require("@wix/sdk-runtime/transformations/video");
const page_url_1 = require("@wix/sdk-runtime/transformations/page-url");
const page_url_2 = require("@wix/sdk-runtime/transformations/page-url");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
var Origin;
(function (Origin) {
    Origin["UNKNOWN"] = "UNKNOWN";
    /** Changed by admin */
    Origin["ADMIN"] = "ADMIN";
    /** Categories were changed */
    Origin["ADD_CATEGORIES"] = "ADD_CATEGORIES";
    /** Saved automatically */
    Origin["AUTO_SAVE"] = "AUTO_SAVE";
    /** Copied from template */
    Origin["COPY_TEMPLATE"] = "COPY_TEMPLATE";
    /** Imported */
    Origin["IMPORT"] = "IMPORT";
    /** Imported in bulk */
    Origin["IMPORT_BULK"] = "IMPORT_BULK";
    /** Imported with html import */
    Origin["IMPORT_HTML"] = "IMPORT_HTML";
    /** Patch import */
    Origin["IMPORT_PATCH"] = "IMPORT_PATCH";
    /** Changed language */
    Origin["LANGUAGE_CHANGE"] = "LANGUAGE_CHANGE";
    /** Saved manually */
    Origin["MANUAL_SAVE"] = "MANUAL_SAVE";
    /** Affected by migration */
    Origin["MIGRATION"] = "MIGRATION";
    /** Affected by moderation */
    Origin["MODERATION"] = "MODERATION";
    /** Moved to trash */
    Origin["MOVE_TO_TRASH"] = "MOVE_TO_TRASH";
    /** Pricing plans were changed */
    Origin["PRICING_PLANS_CHANGE"] = "PRICING_PLANS_CHANGE";
    /** Was provisioned */
    Origin["PROVISION"] = "PROVISION";
    /** Was published */
    Origin["PUBLISH"] = "PUBLISH";
    /** Owner was reassigned */
    Origin["REASSIGN_OWNER"] = "REASSIGN_OWNER";
    /** Was reblogged */
    Origin["REBLOG"] = "REBLOG";
    /** Was restored */
    Origin["RESTORE"] = "RESTORE";
    /** Reverted to draft */
    Origin["REVERT_TO_DRAFT"] = "REVERT_TO_DRAFT";
    /** Was translated */
    Origin["TRANSLATION"] = "TRANSLATION";
    /** Was unpublished */
    Origin["UNPUBLISH"] = "UNPUBLISH";
    /** Was unscheduled */
    Origin["UNSCHEDULE"] = "UNSCHEDULE";
    /** New edit session started which updated editing_session_id id */
    Origin["NEW_EDIT_SESSION"] = "NEW_EDIT_SESSION";
    /** Was scheduled by Later */
    Origin["SCHEDULING_SERVICE_SCHEDULE"] = "SCHEDULING_SERVICE_SCHEDULE";
    /** Was unscheduled by Later */
    Origin["SCHEDULING_SERVICE_UNSCHEDULE"] = "SCHEDULING_SERVICE_UNSCHEDULE";
    /** Was published by Later */
    Origin["SCHEDULING_SERVICE_PUBLISH"] = "SCHEDULING_SERVICE_PUBLISH";
    /** Was scheduled */
    Origin["SCHEDULE"] = "SCHEDULE";
    /** Was removed from moderation */
    Origin["REMOVE_FROM_MODERATION"] = "REMOVE_FROM_MODERATION";
    /** Was rejected from moderation */
    Origin["REJECT_FROM_MODERATION"] = "REJECT_FROM_MODERATION";
    /** Was approved in moderation */
    Origin["APPROVE_IN_MODERATION"] = "APPROVE_IN_MODERATION";
    /** Tag was deleted */
    Origin["DELETE_TAG"] = "DELETE_TAG";
    /** Post was pinned */
    Origin["PIN"] = "PIN";
    /** Post was unpinned */
    Origin["UNPIN"] = "UNPIN";
    /** Saved automatically by AI tool. */
    Origin["AI_AUTO_SAVE"] = "AI_AUTO_SAVE";
})(Origin || (exports.Origin = Origin = {}));
var NodeType;
(function (NodeType) {
    NodeType["PARAGRAPH"] = "PARAGRAPH";
    NodeType["TEXT"] = "TEXT";
    NodeType["HEADING"] = "HEADING";
    NodeType["BULLETED_LIST"] = "BULLETED_LIST";
    NodeType["ORDERED_LIST"] = "ORDERED_LIST";
    NodeType["LIST_ITEM"] = "LIST_ITEM";
    NodeType["BLOCKQUOTE"] = "BLOCKQUOTE";
    NodeType["CODE_BLOCK"] = "CODE_BLOCK";
    NodeType["VIDEO"] = "VIDEO";
    NodeType["DIVIDER"] = "DIVIDER";
    NodeType["FILE"] = "FILE";
    NodeType["GALLERY"] = "GALLERY";
    NodeType["GIF"] = "GIF";
    NodeType["HTML"] = "HTML";
    NodeType["IMAGE"] = "IMAGE";
    NodeType["LINK_PREVIEW"] = "LINK_PREVIEW";
    /** @deprecated */
    NodeType["MAP"] = "MAP";
    NodeType["POLL"] = "POLL";
    NodeType["APP_EMBED"] = "APP_EMBED";
    NodeType["BUTTON"] = "BUTTON";
    NodeType["COLLAPSIBLE_LIST"] = "COLLAPSIBLE_LIST";
    NodeType["TABLE"] = "TABLE";
    NodeType["EMBED"] = "EMBED";
    NodeType["COLLAPSIBLE_ITEM"] = "COLLAPSIBLE_ITEM";
    NodeType["COLLAPSIBLE_ITEM_TITLE"] = "COLLAPSIBLE_ITEM_TITLE";
    NodeType["COLLAPSIBLE_ITEM_BODY"] = "COLLAPSIBLE_ITEM_BODY";
    NodeType["TABLE_CELL"] = "TABLE_CELL";
    NodeType["TABLE_ROW"] = "TABLE_ROW";
    NodeType["EXTERNAL"] = "EXTERNAL";
    NodeType["AUDIO"] = "AUDIO";
    NodeType["CAPTION"] = "CAPTION";
    NodeType["LAYOUT"] = "LAYOUT";
    NodeType["LAYOUT_CELL"] = "LAYOUT_CELL";
})(NodeType || (exports.NodeType = NodeType = {}));
var WidthType;
(function (WidthType) {
    /** Width matches the content width */
    WidthType["CONTENT"] = "CONTENT";
    /** Small Width */
    WidthType["SMALL"] = "SMALL";
    /** Width will match the original asset width */
    WidthType["ORIGINAL"] = "ORIGINAL";
    /** coast-to-coast display */
    WidthType["FULL_WIDTH"] = "FULL_WIDTH";
})(WidthType || (exports.WidthType = WidthType = {}));
var PluginContainerDataAlignment;
(function (PluginContainerDataAlignment) {
    /** Center Alignment */
    PluginContainerDataAlignment["CENTER"] = "CENTER";
    /** Left Alignment */
    PluginContainerDataAlignment["LEFT"] = "LEFT";
    /** Right Alignment */
    PluginContainerDataAlignment["RIGHT"] = "RIGHT";
})(PluginContainerDataAlignment || (exports.PluginContainerDataAlignment = PluginContainerDataAlignment = {}));
var ButtonDataType;
(function (ButtonDataType) {
    /** Regular link button */
    ButtonDataType["LINK"] = "LINK";
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    ButtonDataType["ACTION"] = "ACTION";
})(ButtonDataType || (exports.ButtonDataType = ButtonDataType = {}));
var Target;
(function (Target) {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    Target["SELF"] = "SELF";
    /** Opens the linked document in a new window or tab */
    Target["BLANK"] = "BLANK";
    /** Opens the linked document in the parent frame */
    Target["PARENT"] = "PARENT";
    /** Opens the linked document in the full body of the window */
    Target["TOP"] = "TOP";
})(Target || (exports.Target = Target = {}));
var TextAlignment;
(function (TextAlignment) {
    /** browser default, eqivalent to `initial` */
    TextAlignment["AUTO"] = "AUTO";
    /** Left align */
    TextAlignment["LEFT"] = "LEFT";
    /** Right align */
    TextAlignment["RIGHT"] = "RIGHT";
    /** Center align */
    TextAlignment["CENTER"] = "CENTER";
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    TextAlignment["JUSTIFY"] = "JUSTIFY";
})(TextAlignment || (exports.TextAlignment = TextAlignment = {}));
var LineStyle;
(function (LineStyle) {
    /** Single Line */
    LineStyle["SINGLE"] = "SINGLE";
    /** Double Line */
    LineStyle["DOUBLE"] = "DOUBLE";
    /** Dashed Line */
    LineStyle["DASHED"] = "DASHED";
    /** Dotted Line */
    LineStyle["DOTTED"] = "DOTTED";
})(LineStyle || (exports.LineStyle = LineStyle = {}));
var Width;
(function (Width) {
    /** Large line */
    Width["LARGE"] = "LARGE";
    /** Medium line */
    Width["MEDIUM"] = "MEDIUM";
    /** Small line */
    Width["SMALL"] = "SMALL";
})(Width || (exports.Width = Width = {}));
var Alignment;
(function (Alignment) {
    /** Center alignment */
    Alignment["CENTER"] = "CENTER";
    /** Left alignment */
    Alignment["LEFT"] = "LEFT";
    /** Right alignment */
    Alignment["RIGHT"] = "RIGHT";
})(Alignment || (exports.Alignment = Alignment = {}));
var ViewMode;
(function (ViewMode) {
    /** No PDF view */
    ViewMode["NONE"] = "NONE";
    /** Full PDF view */
    ViewMode["FULL"] = "FULL";
    /** Mini PDF view */
    ViewMode["MINI"] = "MINI";
})(ViewMode || (exports.ViewMode = ViewMode = {}));
var LayoutType;
(function (LayoutType) {
    /** Collage type */
    LayoutType["COLLAGE"] = "COLLAGE";
    /** Masonry type */
    LayoutType["MASONRY"] = "MASONRY";
    /** Grid type */
    LayoutType["GRID"] = "GRID";
    /** Thumbnail type */
    LayoutType["THUMBNAIL"] = "THUMBNAIL";
    /** Slider type */
    LayoutType["SLIDER"] = "SLIDER";
    /** Slideshow type */
    LayoutType["SLIDESHOW"] = "SLIDESHOW";
    /** Panorama type */
    LayoutType["PANORAMA"] = "PANORAMA";
    /** Column type */
    LayoutType["COLUMN"] = "COLUMN";
    /** Magic type */
    LayoutType["MAGIC"] = "MAGIC";
    /** Fullsize images type */
    LayoutType["FULLSIZE"] = "FULLSIZE";
})(LayoutType || (exports.LayoutType = LayoutType = {}));
var Orientation;
(function (Orientation) {
    /** Rows Orientation */
    Orientation["ROWS"] = "ROWS";
    /** Columns Orientation */
    Orientation["COLUMNS"] = "COLUMNS";
})(Orientation || (exports.Orientation = Orientation = {}));
var Crop;
(function (Crop) {
    /** Crop to fill */
    Crop["FILL"] = "FILL";
    /** Crop to fit */
    Crop["FIT"] = "FIT";
})(Crop || (exports.Crop = Crop = {}));
var ThumbnailsAlignment;
(function (ThumbnailsAlignment) {
    /** Top alignment */
    ThumbnailsAlignment["TOP"] = "TOP";
    /** Right alignment */
    ThumbnailsAlignment["RIGHT"] = "RIGHT";
    /** Bottom alignment */
    ThumbnailsAlignment["BOTTOM"] = "BOTTOM";
    /** Left alignment */
    ThumbnailsAlignment["LEFT"] = "LEFT";
    /** No thumbnail */
    ThumbnailsAlignment["NONE"] = "NONE";
})(ThumbnailsAlignment || (exports.ThumbnailsAlignment = ThumbnailsAlignment = {}));
var GIFType;
(function (GIFType) {
    GIFType["NORMAL"] = "NORMAL";
    GIFType["STICKER"] = "STICKER";
})(GIFType || (exports.GIFType = GIFType = {}));
var Source;
(function (Source) {
    Source["HTML"] = "HTML";
    Source["ADSENSE"] = "ADSENSE";
})(Source || (exports.Source = Source = {}));
var MapType;
(function (MapType) {
    /** Roadmap map type */
    MapType["ROADMAP"] = "ROADMAP";
    /** Satellite map type */
    MapType["SATELITE"] = "SATELITE";
    /** Hybrid map type */
    MapType["HYBRID"] = "HYBRID";
    /** Terrain map type */
    MapType["TERRAIN"] = "TERRAIN";
})(MapType || (exports.MapType = MapType = {}));
var ViewRole;
(function (ViewRole) {
    /** Only Poll creator can view the results */
    ViewRole["CREATOR"] = "CREATOR";
    /** Anyone who voted can see the results */
    ViewRole["VOTERS"] = "VOTERS";
    /** Anyone can see the results, even if one didn't vote */
    ViewRole["EVERYONE"] = "EVERYONE";
})(ViewRole || (exports.ViewRole = ViewRole = {}));
var VoteRole;
(function (VoteRole) {
    /** Logged in member */
    VoteRole["SITE_MEMBERS"] = "SITE_MEMBERS";
    /** Anyone */
    VoteRole["ALL"] = "ALL";
})(VoteRole || (exports.VoteRole = VoteRole = {}));
var PollLayoutType;
(function (PollLayoutType) {
    /** List */
    PollLayoutType["LIST"] = "LIST";
    /** Grid */
    PollLayoutType["GRID"] = "GRID";
})(PollLayoutType || (exports.PollLayoutType = PollLayoutType = {}));
var PollLayoutDirection;
(function (PollLayoutDirection) {
    /** Left-to-right */
    PollLayoutDirection["LTR"] = "LTR";
    /** Right-to-left */
    PollLayoutDirection["RTL"] = "RTL";
})(PollLayoutDirection || (exports.PollLayoutDirection = PollLayoutDirection = {}));
var BackgroundType;
(function (BackgroundType) {
    /** Color background type */
    BackgroundType["COLOR"] = "COLOR";
    /** Image background type */
    BackgroundType["IMAGE"] = "IMAGE";
    /** Gradiant background type */
    BackgroundType["GRADIENT"] = "GRADIENT";
})(BackgroundType || (exports.BackgroundType = BackgroundType = {}));
var DecorationType;
(function (DecorationType) {
    DecorationType["BOLD"] = "BOLD";
    DecorationType["ITALIC"] = "ITALIC";
    DecorationType["UNDERLINE"] = "UNDERLINE";
    DecorationType["SPOILER"] = "SPOILER";
    DecorationType["ANCHOR"] = "ANCHOR";
    DecorationType["MENTION"] = "MENTION";
    DecorationType["LINK"] = "LINK";
    DecorationType["COLOR"] = "COLOR";
    DecorationType["FONT_SIZE"] = "FONT_SIZE";
    DecorationType["EXTERNAL"] = "EXTERNAL";
})(DecorationType || (exports.DecorationType = DecorationType = {}));
var FontType;
(function (FontType) {
    FontType["PX"] = "PX";
    FontType["EM"] = "EM";
})(FontType || (exports.FontType = FontType = {}));
var AppType;
(function (AppType) {
    AppType["PRODUCT"] = "PRODUCT";
    AppType["EVENT"] = "EVENT";
    AppType["BOOKING"] = "BOOKING";
})(AppType || (exports.AppType = AppType = {}));
var InitialExpandedItems;
(function (InitialExpandedItems) {
    /** First item will be expended initally */
    InitialExpandedItems["FIRST"] = "FIRST";
    /** All items will expended initally */
    InitialExpandedItems["ALL"] = "ALL";
    /** All items collapsed initally */
    InitialExpandedItems["NONE"] = "NONE";
})(InitialExpandedItems || (exports.InitialExpandedItems = InitialExpandedItems = {}));
var Direction;
(function (Direction) {
    /** Left-to-right */
    Direction["LTR"] = "LTR";
    /** Right-to-left */
    Direction["RTL"] = "RTL";
})(Direction || (exports.Direction = Direction = {}));
var VerticalAlignment;
(function (VerticalAlignment) {
    /** Top alignment */
    VerticalAlignment["TOP"] = "TOP";
    /** Middle alignment */
    VerticalAlignment["MIDDLE"] = "MIDDLE";
    /** Bottom alignment */
    VerticalAlignment["BOTTOM"] = "BOTTOM";
})(VerticalAlignment || (exports.VerticalAlignment = VerticalAlignment = {}));
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 */
var NullValue;
(function (NullValue) {
    /** Null value. */
    NullValue["NULL_VALUE"] = "NULL_VALUE";
})(NullValue || (exports.NullValue = NullValue = {}));
var Status;
(function (Status) {
    Status["UNKNOWN"] = "UNKNOWN";
    /** Status indicating the draft post is published. */
    Status["PUBLISHED"] = "PUBLISHED";
    /** Status indicating the draft post is unpublished. */
    Status["UNPUBLISHED"] = "UNPUBLISHED";
    /** Status indicating the draft post is scheduled for publication. */
    Status["SCHEDULED"] = "SCHEDULED";
    /** Status indicating the draft post is deleted. */
    Status["DELETED"] = "DELETED";
    /**
     * Deprecated. Use `IN_REVIEW` instead. Status indicating the draft post is in review.
     * Target removal date 2024-06-30
     * Reserved for internal use.
     */
    Status["IN_MODERATION"] = "IN_MODERATION";
    /** Status indicating the draft post is in review. */
    Status["IN_REVIEW"] = "IN_REVIEW";
})(Status || (exports.Status = Status = {}));
var ModerationStatusStatus;
(function (ModerationStatusStatus) {
    ModerationStatusStatus["UNKNOWN"] = "UNKNOWN";
    ModerationStatusStatus["APPROVED"] = "APPROVED";
    ModerationStatusStatus["REJECTED"] = "REJECTED";
})(ModerationStatusStatus || (exports.ModerationStatusStatus = ModerationStatusStatus = {}));
var Type;
(function (Type) {
    Type["UNKNOWN"] = "UNKNOWN";
    /** Manually saved. */
    Type["MANUAL"] = "MANUAL";
    /** Triggered by autosave. */
    Type["AUTO_SAVE"] = "AUTO_SAVE";
    /** Copied from template during provisioning flow. */
    Type["PROVISIONING"] = "PROVISIONING";
    /** Imported from another blog. */
    Type["IMPORT"] = "IMPORT";
    /** Triggered by autosave when post created by AI tool. */
    Type["AI_AUTO_SAVE"] = "AI_AUTO_SAVE";
})(Type || (exports.Type = Type = {}));
var Field;
(function (Field) {
    /** Unknown field. */
    Field["UNKNOWN"] = "UNKNOWN";
    /** Includes draft post preview URL. */
    Field["URL"] = "URL";
    /**
     * Includes internal id field.
     * Reserved for internal use.
     */
    Field["INTERNAL_ID"] = "INTERNAL_ID";
    /** Includes content field. */
    Field["CONTENT"] = "CONTENT";
    /** Includes rich content field. */
    Field["RICH_CONTENT"] = "RICH_CONTENT";
    /** If the user has not set excerpt, returns the one autogenerated from content. */
    Field["GENERATED_EXCERPT"] = "GENERATED_EXCERPT";
})(Field || (exports.Field = Field = {}));
var Action;
(function (Action) {
    /** Update the draft post. */
    Action["UPDATE"] = "UPDATE";
    /** Update and publish a draft post. */
    Action["UPDATE_PUBLISH"] = "UPDATE_PUBLISH";
    /** Update the draft post and schedule a publish date. */
    Action["UPDATE_SCHEDULE"] = "UPDATE_SCHEDULE";
    /** Update the post and revert it to draft. */
    Action["UPDATE_REVERT_TO_DRAFT"] = "UPDATE_REVERT_TO_DRAFT";
    /** Update the draft post and cancel the scheduled publish date. */
    Action["UPDATE_CANCEL_SCHEDULE"] = "UPDATE_CANCEL_SCHEDULE";
    /** Update and reject draft post. */
    Action["UPDATE_REJECT"] = "UPDATE_REJECT";
    /** Update a post that's already been published. This creates and updates a draft version of the post. The original post is still published. */
    Action["UPDATE_PUBLICATION"] = "UPDATE_PUBLICATION";
})(Action || (exports.Action = Action = {}));
var GetDraftPostsSort;
(function (GetDraftPostsSort) {
    /** Sort by `editedDate` in descending order. */
    GetDraftPostsSort["EDITING_DATE_DESC"] = "EDITING_DATE_DESC";
    /** Sort by `editedDate` in ascending order. */
    GetDraftPostsSort["EDITING_DATE_ASC"] = "EDITING_DATE_ASC";
})(GetDraftPostsSort || (exports.GetDraftPostsSort = GetDraftPostsSort = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
var TotalDraftPostsGroupingField;
(function (TotalDraftPostsGroupingField) {
    /** Groups results by status. */
    TotalDraftPostsGroupingField["STATUS"] = "STATUS";
    /** Groups results by language. */
    TotalDraftPostsGroupingField["LANGUAGE"] = "LANGUAGE";
})(TotalDraftPostsGroupingField || (exports.TotalDraftPostsGroupingField = TotalDraftPostsGroupingField = {}));
/**
 * Creates a draft post.
 *
 * The draft post's `memberId` is required for third-party apps.
 * @param draftPost - Draft post to create.
 * @public
 * @requiredField draftPost
 * @requiredField draftPost.title
 * @param options - Options for creating a draft post.
 * @permissionId BLOG.CREATE-DRAFT
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.CreateDraftPost
 */
async function createDraftPost(draftPost, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        draftPost: draftPost,
        publish: options?.publish,
        fieldsets: options?.fieldsets,
    }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [
                { path: 'draftPost.heroImage' },
                { path: 'draftPost.coverMedia.image' },
                { path: 'draftPost.media.wixMedia.image' },
            ],
        },
        {
            transformFn: page_url_1.transformSDKPageURLToRESTPageURL,
            paths: [
                { path: 'draftPost.url' },
                { path: 'draftPost.translations.url' },
            ],
        },
        {
            transformFn: video_1.transformSDKVideoToRESTVideo,
            paths: [{ path: 'draftPost.coverMedia.video' }],
        },
        {
            transformFn: video_v2_1.transformSDKVideoV2ToRESTVideoV2,
            paths: [{ path: 'draftPost.media.wixMedia.videoV2' }],
        },
    ]);
    const reqOpts = ambassadorWixBlogV3Draft.createDraftPost(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'draftPost.heroImage' },
                    { path: 'draftPost.coverMedia.image' },
                    { path: 'draftPost.media.wixMedia.image' },
                ],
            },
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'draftPost.url' },
                    { path: 'draftPost.translations.url' },
                ],
            },
            {
                transformFn: video_2.transformRESTVideoToSDKVideo,
                paths: [{ path: 'draftPost.coverMedia.video' }],
            },
            {
                transformFn: video_v2_2.transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'draftPost.media.wixMedia.videoV2' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                draftPost: '$[0]',
                publish: '$[1].publish',
                fieldsets: '$[1].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['draftPost', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createDraftPost = createDraftPost;
/**
 * Creates multiple draft posts.
 * @param draftPosts - Draft posts to create.
 * @public
 * @requiredField draftPosts
 * @requiredField draftPosts.title
 * @param options - Options for creating multiple draft posts.
 * @permissionId BLOG.CREATE-DRAFT
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.BulkCreateDraftPosts
 */
async function bulkCreateDraftPosts(draftPosts, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        draftPosts: draftPosts,
        publish: options?.publish,
        returnFullEntity: options?.returnFullEntity,
        fieldsets: options?.fieldsets,
    }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [
                { path: 'draftPosts.heroImage' },
                { path: 'draftPosts.coverMedia.image' },
                { path: 'draftPosts.media.wixMedia.image' },
            ],
        },
        {
            transformFn: page_url_1.transformSDKPageURLToRESTPageURL,
            paths: [
                { path: 'draftPosts.url' },
                { path: 'draftPosts.translations.url' },
            ],
        },
        {
            transformFn: video_1.transformSDKVideoToRESTVideo,
            paths: [{ path: 'draftPosts.coverMedia.video' }],
        },
        {
            transformFn: video_v2_1.transformSDKVideoV2ToRESTVideoV2,
            paths: [{ path: 'draftPosts.media.wixMedia.videoV2' }],
        },
    ]);
    const reqOpts = ambassadorWixBlogV3Draft.bulkCreateDraftPosts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'results.item.heroImage' },
                    { path: 'results.item.coverMedia.image' },
                    { path: 'results.item.media.wixMedia.image' },
                ],
            },
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'results.item.url' },
                    { path: 'results.item.translations.url' },
                ],
            },
            {
                transformFn: video_2.transformRESTVideoToSDKVideo,
                paths: [{ path: 'results.item.coverMedia.video' }],
            },
            {
                transformFn: video_v2_2.transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'results.item.media.wixMedia.videoV2' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                draftPosts: '$[0]',
                publish: '$[1].publish',
                returnFullEntity: '$[1].returnFullEntity',
                fieldsets: '$[1].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['draftPosts', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkCreateDraftPosts = bulkCreateDraftPosts;
/**
 * Updates multiple draft posts.
 * @public
 * @requiredField options.draftPosts.draftPost
 * @requiredField options.draftPosts.draftPost._id
 * @param options - Options for updating multiple draft posts.
 * @permissionId BLOG.EDIT-DRAFT
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.BulkUpdateDraftPosts
 */
async function bulkUpdateDraftPosts(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        draftPosts: options?.draftPosts,
        action: options?.action,
        scheduledPublishDate: options?.scheduledPublishDate,
        returnFullEntity: options?.returnFullEntity,
        fieldsets: options?.fieldsets,
    }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [
                { path: 'draftPosts.draftPost.heroImage' },
                { path: 'draftPosts.draftPost.coverMedia.image' },
                { path: 'draftPosts.draftPost.media.wixMedia.image' },
            ],
        },
        {
            transformFn: page_url_1.transformSDKPageURLToRESTPageURL,
            paths: [
                { path: 'draftPosts.draftPost.url' },
                { path: 'draftPosts.draftPost.translations.url' },
            ],
        },
        {
            transformFn: video_1.transformSDKVideoToRESTVideo,
            paths: [{ path: 'draftPosts.draftPost.coverMedia.video' }],
        },
        {
            transformFn: video_v2_1.transformSDKVideoV2ToRESTVideoV2,
            paths: [{ path: 'draftPosts.draftPost.media.wixMedia.videoV2' }],
        },
    ]);
    const reqOpts = ambassadorWixBlogV3Draft.bulkUpdateDraftPosts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'results.item.heroImage' },
                    { path: 'results.item.coverMedia.image' },
                    { path: 'results.item.media.wixMedia.image' },
                ],
            },
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'results.item.url' },
                    { path: 'results.item.translations.url' },
                ],
            },
            {
                transformFn: video_2.transformRESTVideoToSDKVideo,
                paths: [{ path: 'results.item.coverMedia.video' }],
            },
            {
                transformFn: video_v2_2.transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'results.item.media.wixMedia.videoV2' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                draftPosts: '$[0].draftPosts',
                action: '$[0].action',
                scheduledPublishDate: '$[0].scheduledPublishDate',
                returnFullEntity: '$[0].returnFullEntity',
                fieldsets: '$[0].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkUpdateDraftPosts = bulkUpdateDraftPosts;
/**
 * Retrieves a list of up to 100 deleted draft posts.
 *
 * List Deleted Draft Posts runs with these defaults, which you can override:
 * - `editedDate` is sorted in descending order. In this case,`editedDate` implies the date the post was deleted.
 * - `paging.limit` is `50`.
 * - `paging.offset` is `0`.
 * @public
 * @param options - Options for listing deleted draft posts.
 * @permissionId BLOG.READ_DRAFT
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.ListDeletedDraftPosts
 */
async function listDeletedDraftPosts(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        language: options?.language,
        sort: options?.sort,
        paging: options?.paging,
        fieldsets: options?.fieldsets,
        draftPostIds: options?.draftPostIds,
    });
    const reqOpts = ambassadorWixBlogV3Draft.listDeletedDraftPosts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'draftPosts.heroImage' },
                    { path: 'draftPosts.coverMedia.image' },
                    { path: 'draftPosts.media.wixMedia.image' },
                ],
            },
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'draftPosts.url' },
                    { path: 'draftPosts.translations.url' },
                ],
            },
            {
                transformFn: video_2.transformRESTVideoToSDKVideo,
                paths: [{ path: 'draftPosts.coverMedia.video' }],
            },
            {
                transformFn: video_v2_2.transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'draftPosts.media.wixMedia.videoV2' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                language: '$[0].language',
                sort: '$[0].sort',
                paging: '$[0].paging',
                fieldsets: '$[0].fieldsets',
                draftPostIds: '$[0].draftPostIds',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listDeletedDraftPosts = listDeletedDraftPosts;
/**
 * Gets a draft post by the provided ID.
 *
 * Uses the provided `draftPostId` to retrieve a draft post.
 * @param draftPostId - Draft post ID.
 * @public
 * @requiredField draftPostId
 * @param options - Options for getting a draft post.
 * @permissionId BLOG.READ_DRAFT
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.GetDraftPost
 */
async function getDraftPost(draftPostId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        draftPostId: draftPostId,
        fieldsets: options?.fieldsets,
    });
    const reqOpts = ambassadorWixBlogV3Draft.getDraftPost(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'draftPost.heroImage' },
                    { path: 'draftPost.coverMedia.image' },
                    { path: 'draftPost.media.wixMedia.image' },
                ],
            },
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'draftPost.url' },
                    { path: 'draftPost.translations.url' },
                ],
            },
            {
                transformFn: video_2.transformRESTVideoToSDKVideo,
                paths: [{ path: 'draftPost.coverMedia.video' }],
            },
            {
                transformFn: video_v2_2.transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'draftPost.media.wixMedia.videoV2' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                draftPostId: '$[0]',
                fieldsets: '$[1].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['draftPostId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getDraftPost = getDraftPost;
/**
 * Updates a draft post.
 * @param _id - Draft post ID.
 * @public
 * @requiredField _id
 * @requiredField draftPost
 * @param options - Options for updating a draft post.
 * @param draftPost - Draft Post info.
 * @permissionId BLOG.EDIT-DRAFT
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.UpdateDraftPost
 */
async function updateDraftPost(_id, draftPost, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        draftPost: { ...draftPost, id: _id },
        action: options?.action,
        scheduledPublishDate: options?.scheduledPublishDate,
        fieldsets: options?.fieldsets,
    }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [
                { path: 'draftPost.heroImage' },
                { path: 'draftPost.coverMedia.image' },
                { path: 'draftPost.media.wixMedia.image' },
            ],
        },
        {
            transformFn: page_url_1.transformSDKPageURLToRESTPageURL,
            paths: [
                { path: 'draftPost.url' },
                { path: 'draftPost.translations.url' },
            ],
        },
        {
            transformFn: video_1.transformSDKVideoToRESTVideo,
            paths: [{ path: 'draftPost.coverMedia.video' }],
        },
        {
            transformFn: video_v2_1.transformSDKVideoV2ToRESTVideoV2,
            paths: [{ path: 'draftPost.media.wixMedia.videoV2' }],
        },
    ]);
    const reqOpts = ambassadorWixBlogV3Draft.updateDraftPost(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'draftPost.heroImage' },
                    { path: 'draftPost.coverMedia.image' },
                    { path: 'draftPost.media.wixMedia.image' },
                ],
            },
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'draftPost.url' },
                    { path: 'draftPost.translations.url' },
                ],
            },
            {
                transformFn: video_2.transformRESTVideoToSDKVideo,
                paths: [{ path: 'draftPost.coverMedia.video' }],
            },
            {
                transformFn: video_v2_2.transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'draftPost.media.wixMedia.videoV2' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { draftPost: '$[1]' },
            explicitPathsToArguments: {
                'draftPost.id': '$[0]',
                action: '$[2].action',
                scheduledPublishDate: '$[2].scheduledPublishDate',
                fieldsets: '$[2].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'draftPost', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateDraftPost = updateDraftPost;
/**
 * Moves a draft post with the provided ID to the trash bin.
 * A published post can also be deleted by its provided `draftPostId`.
 *
 * The optional `permanent` field enables you to delete a post permanently, bypassing the trash bin. When a draft post is deleted this way, it can't be restored.
 * @param draftPostId - Draft post ID.
 * @public
 * @requiredField draftPostId
 * @param options - Options for deleting a draft post.
 * @permissionId BLOG.DELETE-DRAFT
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.DeleteDraftPost
 */
async function deleteDraftPost(draftPostId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        draftPostId: draftPostId,
        permanent: options?.permanent,
    });
    const reqOpts = ambassadorWixBlogV3Draft.deleteDraftPost(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                draftPostId: '$[0]',
                permanent: '$[1].permanent',
            },
            singleArgumentUnchanged: false,
        }, ['draftPostId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteDraftPost = deleteDraftPost;
/**
 * Permanently deletes a draft post by the provided ID from the trash bin.
 *
 * Uses the provided `draftPostId` to permanently delete a draft post from the trash bin. This action is permanent and cannot be reversed.
 * @param draftPostId - Draft post ID.
 * @public
 * @requiredField draftPostId
 * @permissionId BLOG.DELETE-DRAFT
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.RemoveFromTrashBin
 */
async function removeFromTrashBin(draftPostId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        draftPostId: draftPostId,
    });
    const reqOpts = ambassadorWixBlogV3Draft.removeFromTrashBin(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { draftPostId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['draftPostId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.removeFromTrashBin = removeFromTrashBin;
/**
 * Deletes multiple draft posts.
 * @param postIds - Post IDs.
 * @public
 * @requiredField postIds
 * @param options - Options for deleting multiple draft posts.
 * @permissionId BLOG.DELETE-DRAFT
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.BulkDeleteDraftPosts
 */
async function bulkDeleteDraftPosts(postIds, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        postIds: postIds,
        permanent: options?.permanent,
    });
    const reqOpts = ambassadorWixBlogV3Draft.bulkDeleteDraftPosts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'results.item.heroImage' },
                    { path: 'results.item.coverMedia.image' },
                    { path: 'results.item.media.wixMedia.image' },
                ],
            },
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'results.item.url' },
                    { path: 'results.item.translations.url' },
                ],
            },
            {
                transformFn: video_2.transformRESTVideoToSDKVideo,
                paths: [{ path: 'results.item.coverMedia.video' }],
            },
            {
                transformFn: video_v2_2.transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'results.item.media.wixMedia.videoV2' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                postIds: '$[0]',
                permanent: '$[1].permanent',
            },
            singleArgumentUnchanged: false,
        }, ['postIds', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkDeleteDraftPosts = bulkDeleteDraftPosts;
/**
 * Retrieves a list of up to 100 draft posts per request.
 *
 * List Draft Posts runs with these defaults, which you can override:
 * - `editedDate` is sorted in descending order.
 * - `paging.limit` is `50`.
 * - `paging.offset` is `0`.
 * @public
 * @param options - Options for listing multiple draft posts.
 * @permissionId BLOG.READ_DRAFT
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.ListDraftPosts
 */
async function listDraftPosts(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        status: options?.status,
        language: options?.language,
        sort: options?.sort,
        paging: options?.paging,
        fieldsets: options?.fieldsets,
    });
    const reqOpts = ambassadorWixBlogV3Draft.listDraftPosts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'draftPosts.heroImage' },
                    { path: 'draftPosts.coverMedia.image' },
                    { path: 'draftPosts.media.wixMedia.image' },
                ],
            },
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'draftPosts.url' },
                    { path: 'draftPosts.translations.url' },
                ],
            },
            {
                transformFn: video_2.transformRESTVideoToSDKVideo,
                paths: [{ path: 'draftPosts.coverMedia.video' }],
            },
            {
                transformFn: video_v2_2.transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'draftPosts.media.wixMedia.videoV2' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                status: '$[0].status',
                language: '$[0].language',
                sort: '$[0].sort',
                paging: '$[0].paging',
                fieldsets: '$[0].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listDraftPosts = listDraftPosts;
/**
 * Gets a deleted draft post from the trash bin by the provided ID.
 *
 * Uses the provided `draftPostId` to retrieve a previously deleted draft post from the trash bin.
 * @param draftPostId - Draft post ID.
 * @public
 * @requiredField draftPostId
 * @permissionId BLOG.READ_DRAFT
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.GetDeletedDraftPost
 */
async function getDeletedDraftPost(draftPostId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        draftPostId: draftPostId,
    });
    const reqOpts = ambassadorWixBlogV3Draft.getDeletedDraftPost(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'draftPost.heroImage' },
                    { path: 'draftPost.coverMedia.image' },
                    { path: 'draftPost.media.wixMedia.image' },
                ],
            },
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'draftPost.url' },
                    { path: 'draftPost.translations.url' },
                ],
            },
            {
                transformFn: video_2.transformRESTVideoToSDKVideo,
                paths: [{ path: 'draftPost.coverMedia.video' }],
            },
            {
                transformFn: video_v2_2.transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'draftPost.media.wixMedia.videoV2' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { draftPostId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['draftPostId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getDeletedDraftPost = getDeletedDraftPost;
/**
 * Restores a deleted draft post from the trash bin by the provided ID.
 *
 * Uses the `draftPostId` to restore a deleted draft post from the trash bin.
 * @param draftPostId - Draft post ID.
 * @public
 * @requiredField draftPostId
 * @permissionId BLOG.EDIT-DRAFT
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.RestoreFromTrashBin
 */
async function restoreFromTrashBin(draftPostId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        draftPostId: draftPostId,
    });
    const reqOpts = ambassadorWixBlogV3Draft.restoreFromTrashBin(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'draftPost.heroImage' },
                    { path: 'draftPost.coverMedia.image' },
                    { path: 'draftPost.media.wixMedia.image' },
                ],
            },
            {
                transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                paths: [
                    { path: 'draftPost.url' },
                    { path: 'draftPost.translations.url' },
                ],
            },
            {
                transformFn: video_2.transformRESTVideoToSDKVideo,
                paths: [{ path: 'draftPost.coverMedia.video' }],
            },
            {
                transformFn: video_v2_2.transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'draftPost.media.wixMedia.videoV2' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { draftPostId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['draftPostId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.restoreFromTrashBin = restoreFromTrashBin;
/**
 * Retrieves a list of up to 100 draft posts, given the provided paging, filtering, and sorting.
 *
 * Query Draft Posts runs with these defaults, which you can override:
 * - `editedDate` is sorted in `DESC` order.
 * - `paging.limit` is `50`.
 * - `paging.offset` is `0`.
 * @public
 * @param options - Options for querying draft posts.
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionId BLOG.READ_DRAFT
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.QueryDraftPosts
 */
function queryDraftPosts(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixBlogV3Draft.queryDraftPosts({
                ...payload,
                ...(options ?? {}),
            });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(data, [
                {
                    transformFn: image_2.transformRESTImageToSDKImage,
                    paths: [
                        { path: 'draftPosts.heroImage' },
                        { path: 'draftPosts.coverMedia.image' },
                        { path: 'draftPosts.media.wixMedia.image' },
                    ],
                },
                {
                    transformFn: page_url_2.transformRESTPageURLToSDKPageURL,
                    paths: [
                        { path: 'draftPosts.url' },
                        { path: 'draftPosts.translations.url' },
                    ],
                },
                {
                    transformFn: video_2.transformRESTVideoToSDKVideo,
                    paths: [{ path: 'draftPosts.coverMedia.video' }],
                },
                {
                    transformFn: video_v2_2.transformRESTVideoV2ToSDKVideoV2,
                    paths: [{ path: 'draftPosts.media.wixMedia.videoV2' }],
                },
            ]));
            return {
                items: transformedData?.draftPosts,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
exports.queryDraftPosts = queryDraftPosts;
/**
 * Publishes a specified draft post by ID. This creates a new post entity with the data from the draft post.
 *
 * If the specified draft post was already published, the published post will be updated with the latest values from the draft post entity.
 * @param draftPostId - Draft post ID.
 * @public
 * @requiredField draftPostId
 * @permissionId BLOG.PUBLISH-POST
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.DraftPostService.PublishDraftPost
 */
async function publishDraftPost(draftPostId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        draftPostId: draftPostId,
    });
    const reqOpts = ambassadorWixBlogV3Draft.publishDraftPost(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { draftPostId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['draftPostId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.publishDraftPost = publishDraftPost;
//# sourceMappingURL=blog-v3-draft-draft-posts.universal.js.map