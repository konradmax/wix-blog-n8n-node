/** BlogCache is the main entity of BlogCacheService */
export interface BlogCache {
    /**
     * MetaSite ID.
     * @readonly
     */
    id?: string | null;
    /** Site supported languages. */
    siteSupportedLanguages?: SiteSupportedLanguage[];
    /** Pages data. */
    pagesData?: PagesData;
    /** Site properties. */
    siteProperties?: SiteProperties;
    /**
     * Date the blog cache was last updated
     * @readonly
     */
    updatedDate?: Date | null;
}
export interface SiteSupportedLanguage {
    /** Language code */
    languageCode?: string;
    /** Locale status. */
    status?: LocaleStatus;
    /** Flag code. */
    flag?: Flag;
    /** Resolution method. */
    resolutionMethod?: ResolutionMethod;
}
export declare enum LocaleStatus {
    /** Value not specified */
    UNDEFINED_STATUS = "UNDEFINED_STATUS",
    /** Locale was added to site but was not activated */
    INACTIVE = "INACTIVE",
    /** Locale was added to site and activated */
    ACTIVE = "ACTIVE",
    /** Default locale (always active) */
    DEFAULT = "DEFAULT"
}
export declare enum Flag {
    UNDEFINED_FLAG_CODE = "UNDEFINED_FLAG_CODE",
    AFG = "AFG",
    AGO = "AGO",
    AIA = "AIA",
    ALA = "ALA",
    ALB = "ALB",
    AND = "AND",
    ARE = "ARE",
    ARG = "ARG",
    ARM = "ARM",
    ASM = "ASM",
    ATF = "ATF",
    ATG = "ATG",
    AUS = "AUS",
    AUT = "AUT",
    AZE = "AZE",
    BDI = "BDI",
    BEL = "BEL",
    BEN = "BEN",
    BES = "BES",
    BFA = "BFA",
    BGD = "BGD",
    BGR = "BGR",
    BHR = "BHR",
    BHS = "BHS",
    BIH = "BIH",
    BLM = "BLM",
    BLR = "BLR",
    BLZ = "BLZ",
    BMU = "BMU",
    BOL = "BOL",
    BRA = "BRA",
    BRB = "BRB",
    BRN = "BRN",
    BRT = "BRT",
    BTN = "BTN",
    BWA = "BWA",
    CAF = "CAF",
    CAN = "CAN",
    CAT = "CAT",
    CHE = "CHE",
    CHL = "CHL",
    CHN = "CHN",
    CIV = "CIV",
    CMR = "CMR",
    COD = "COD",
    COG = "COG",
    COL = "COL",
    COM = "COM",
    COR = "COR",
    CPV = "CPV",
    CRI = "CRI",
    CUB = "CUB",
    CUW = "CUW",
    CYM = "CYM",
    CZE = "CZE",
    DEU = "DEU",
    DJI = "DJI",
    DMA = "DMA",
    DNK = "DNK",
    DOM = "DOM",
    DZA = "DZA",
    ECU = "ECU",
    EGY = "EGY",
    ERI = "ERI",
    ESP = "ESP",
    EST = "EST",
    ETH = "ETH",
    EUR = "EUR",
    EUS = "EUS",
    FIN = "FIN",
    FJI = "FJI",
    FLK = "FLK",
    FRA = "FRA",
    FRO = "FRO",
    FSM = "FSM",
    GAB = "GAB",
    GBR = "GBR",
    GEO = "GEO",
    GGY = "GGY",
    GHA = "GHA",
    GIB = "GIB",
    GIN = "GIN",
    GLG = "GLG",
    GLO = "GLO",
    GLP = "GLP",
    GMB = "GMB",
    GNB = "GNB",
    GNQ = "GNQ",
    GRC = "GRC",
    GRD = "GRD",
    GRL = "GRL",
    GTM = "GTM",
    GUM = "GUM",
    GUY = "GUY",
    HKG = "HKG",
    HND = "HND",
    HRV = "HRV",
    HTI = "HTI",
    HUN = "HUN",
    IDN = "IDN",
    IMN = "IMN",
    IND = "IND",
    IOT = "IOT",
    IRL = "IRL",
    IRN = "IRN",
    IRQ = "IRQ",
    ISL = "ISL",
    ISR = "ISR",
    ITA = "ITA",
    JAM = "JAM",
    JEY = "JEY",
    JOR = "JOR",
    JPN = "JPN",
    KAZ = "KAZ",
    KEN = "KEN",
    KGZ = "KGZ",
    KHM = "KHM",
    KIR = "KIR",
    KNA = "KNA",
    KOR = "KOR",
    KUR = "KUR",
    KWT = "KWT",
    LAO = "LAO",
    LBN = "LBN",
    LBR = "LBR",
    LBY = "LBY",
    LCA = "LCA",
    LIE = "LIE",
    LKA = "LKA",
    LSO = "LSO",
    LTU = "LTU",
    LUX = "LUX",
    LVA = "LVA",
    MAC = "MAC",
    MAF = "MAF",
    MAR = "MAR",
    MCO = "MCO",
    MDA = "MDA",
    MDG = "MDG",
    MDV = "MDV",
    MEX = "MEX",
    MHL = "MHL",
    MKD = "MKD",
    MLI = "MLI",
    MLT = "MLT",
    MMR = "MMR",
    MNE = "MNE",
    MNG = "MNG",
    MNP = "MNP",
    MOZ = "MOZ",
    MRT = "MRT",
    MSR = "MSR",
    MTQ = "MTQ",
    MWI = "MWI",
    MYS = "MYS",
    MYT = "MYT",
    NAM = "NAM",
    NCL = "NCL",
    NER = "NER",
    NFK = "NFK",
    NGA = "NGA",
    NIC = "NIC",
    NIU = "NIU",
    NLD = "NLD",
    NOR = "NOR",
    NPL = "NPL",
    NRU = "NRU",
    NZL = "NZL",
    OMN = "OMN",
    PAK = "PAK",
    PAN = "PAN",
    PCN = "PCN",
    PER = "PER",
    PHL = "PHL",
    PLW = "PLW",
    PNG = "PNG",
    POL = "POL",
    PRI = "PRI",
    PRK = "PRK",
    PRT = "PRT",
    PRY = "PRY",
    PSE = "PSE",
    PYF = "PYF",
    QAT = "QAT",
    REU = "REU",
    ROU = "ROU",
    RUS = "RUS",
    RWA = "RWA",
    SAU = "SAU",
    SDN = "SDN",
    SEN = "SEN",
    SGP = "SGP",
    SGS = "SGS",
    SHN = "SHN",
    SJM = "SJM",
    SLB = "SLB",
    SLE = "SLE",
    SLV = "SLV",
    SMR = "SMR",
    SOM = "SOM",
    SPM = "SPM",
    SRB = "SRB",
    SSD = "SSD",
    STP = "STP",
    SUR = "SUR",
    SVK = "SVK",
    SVN = "SVN",
    SWE = "SWE",
    SWZ = "SWZ",
    SXM = "SXM",
    SYC = "SYC",
    SYR = "SYR",
    TCA = "TCA",
    TCD = "TCD",
    TGO = "TGO",
    THA = "THA",
    TJK = "TJK",
    TKL = "TKL",
    TKM = "TKM",
    TLS = "TLS",
    TON = "TON",
    TTO = "TTO",
    TUN = "TUN",
    TUR = "TUR",
    TUV = "TUV",
    TWN = "TWN",
    TZA = "TZA",
    UGA = "UGA",
    UKR = "UKR",
    URY = "URY",
    USA = "USA",
    UZB = "UZB",
    VAT = "VAT",
    VCT = "VCT",
    VEN = "VEN",
    VGB = "VGB",
    VIR = "VIR",
    VLC = "VLC",
    VNM = "VNM",
    VUT = "VUT",
    WLF = "WLF",
    WLS = "WLS",
    YEM = "YEM",
    ZAF = "ZAF",
    ZMB = "ZMB",
    ZWE = "ZWE"
}
export declare enum ResolutionMethod {
    QUERY_PARAM = "QUERY_PARAM",
    SUBDOMAIN = "SUBDOMAIN",
    SUBDIRECTORY = "SUBDIRECTORY"
}
export interface PagesData {
    /** Blog page. */
    blogPage?: PageInfo;
    /** Post page. */
    postPage?: PageInfo;
    /**
     * Site primary url.
     * @readonly
     */
    sitePrimaryUrl?: string | null;
}
export interface PageInfo {
    /** Title. */
    title?: string;
    /** Page ID. */
    pageId?: string;
    /** Is hidden. */
    hidden?: boolean;
    /** Path. */
    path?: string;
    /** TPA page ID. */
    tpaPageId?: string | null;
    /** TPA embedded service ID. */
    tpaEmbeddedServiceId?: number | null;
    /** TPA app ID. */
    tpaAppId?: string | null;
    /** Page URL. */
    url?: string;
    /** Hidden path. */
    hiddenPath?: string | null;
    /** Is SM protected. */
    isSmProtected?: boolean;
    /** Is dynamic. */
    isDynamic?: boolean;
    /** Platform apps. */
    platformApps?: string[];
}
export interface SiteProperties {
    /** Business name. */
    businessName?: string | null;
    /** Business logo. */
    logo?: string | null;
    /** Site display name. */
    siteDisplayName?: string | null;
    /** Description. */
    description?: string | null;
}
export interface GetBlogCacheRequest {
}
export interface GetBlogCacheResponse {
    /** Blog cache. */
    blogCache?: BlogCache;
}
/** Encapsulates all details written to the Greyhound topic when a site's properties are updated. */
export interface SitePropertiesNotification {
    /** The site ID for which this update notification applies. */
    metasiteId?: string;
    /** The actual update event. */
    event?: SitePropertiesEvent;
    /** A convenience set of mappings from the MetaSite ID to its constituent services. */
    translations?: Translation[];
    /** Context of the notification */
    changeContext?: ChangeContext;
}
/** The actual update event for a particular notification. */
export interface SitePropertiesEvent {
    /** Version of the site's properties represented by this update. */
    version?: number;
    /** Set of properties that were updated - corresponds to the fields in "properties". */
    fields?: string[];
    /** Updated properties. */
    properties?: Properties;
}
export interface Properties {
    /** Site categories. */
    categories?: Categories;
    /** Site locale. */
    locale?: Locale;
    /**
     * Site language.
     *
     * Two-letter language code in [ISO 639-1 alpha-2](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format.
     */
    language?: string | null;
    /**
     * Site currency format used to bill customers.
     *
     * Three-letter currency code in [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     */
    paymentCurrency?: string | null;
    /** Timezone in `America/New_York` format. */
    timeZone?: string | null;
    /** Email address. */
    email?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Fax number. */
    fax?: string | null;
    /** Address. */
    address?: Address;
    /** Site display name. */
    siteDisplayName?: string | null;
    /** Business name. */
    businessName?: string | null;
    /** Path to the site's logo in Wix Media (without Wix Media base URL). */
    logo?: string | null;
    /** Site description. */
    description?: string | null;
    /**
     * Business schedule. Regular and exceptional time periods when the business is open or the service is available.
     *
     * __Note:__ Not supported by Wix Bookings.
     */
    businessSchedule?: BusinessSchedule;
    /** Supported languages of a site and the primary language. */
    multilingual?: Multilingual;
    /** Cookie policy the Wix user defined for their site (before the site visitor interacts with/limits it). */
    consentPolicy?: ConsentPolicy;
    /**
     * Supported values: `FITNESS SERVICE`, `RESTAURANT`, `BLOG`, `STORE`, `EVENT`, `UNKNOWN`.
     *
     * Site business type.
     */
    businessConfig?: string | null;
    /** External site URL that uses Wix as its headless business solution. */
    externalSiteUrl?: string | null;
    /** Track clicks analytics. */
    trackClicksAnalytics?: boolean;
}
export interface Categories {
    /** Primary site category. */
    primary?: string;
    /** Secondary site category. */
    secondary?: string[];
    /** Business Term Id */
    businessTermId?: string | null;
}
export interface Locale {
    /** Two-letter language code in [ISO 639-1 alpha-2](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format. */
    languageCode?: string;
    /** Two-letter country code in [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) format. */
    country?: string;
}
export interface Address {
    /** Street name. */
    street?: string;
    /** City name. */
    city?: string;
    /** Two-letter country code in an [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. */
    country?: string;
    /** State. */
    state?: string;
    /** Zip or postal code. */
    zip?: string;
    /** Extra information to be displayed in the address. */
    hint?: AddressHint;
    /** Whether this address represents a physical location. */
    isPhysical?: boolean;
    /** Google-formatted version of this address. */
    googleFormattedAddress?: string;
    /** Street number. */
    streetNumber?: string;
    /** Apartment number. */
    apartmentNumber?: string;
    /** Geographic coordinates of location. */
    coordinates?: GeoCoordinates;
}
/**
 * Extra information on displayed addresses.
 * This is used for display purposes. Used to add additional data about the address, such as "In the passage".
 * Free text. In addition, the user can state where to display the additional description - before, after, or instead of the address string.
 */
export interface AddressHint {
    /** Extra text displayed next to, or instead of, the actual address. */
    text?: string;
    /** Where the extra text should be displayed. */
    placement?: PlacementType;
}
/** Where the extra text should be displayed: before, after or instead of the actual address. */
export declare enum PlacementType {
    BEFORE = "BEFORE",
    AFTER = "AFTER",
    REPLACE = "REPLACE"
}
/** Geocoordinates for a particular address. */
export interface GeoCoordinates {
    /** Latitude of the location. Must be between -90 and 90. */
    latitude?: number;
    /** Longitude of the location. Must be between -180 and 180. */
    longitude?: number;
}
/** Business schedule. Regular and exceptional time periods when the business is open or the service is available. */
export interface BusinessSchedule {
    /** Weekly recurring time periods when the business is regularly open or the service is available. Limited to 100 time periods. */
    periods?: TimePeriod[];
    /** Exceptions to the business's regular hours. The business can be open or closed during the exception. */
    specialHourPeriod?: SpecialHourPeriod[];
}
/** Weekly recurring time periods when the business is regularly open or the service is available. */
export interface TimePeriod {
    /** Day of the week the period starts on. */
    openDay?: DayOfWeek;
    /**
     * Time the period starts in 24-hour [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) extended format. Valid values are `00:00` to `24:00`, where `24:00` represents
     * midnight at the end of the specified day.
     */
    openTime?: string;
    /** Day of the week the period ends on. */
    closeDay?: DayOfWeek;
    /**
     * Time the period ends in 24-hour [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) extended format. Valid values are `00:00` to `24:00`, where `24:00` represents
     * midnight at the end of the specified day.
     *
     * __Note:__ If `openDay` and `closeDay` specify the same day of the week `closeTime` must be later than `openTime`.
     */
    closeTime?: string;
}
/** Enumerates the days of the week. */
export declare enum DayOfWeek {
    MONDAY = "MONDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY",
    THURSDAY = "THURSDAY",
    FRIDAY = "FRIDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY"
}
/** Exception to the business's regular hours. The business can be open or closed during the exception. */
export interface SpecialHourPeriod {
    /** Start date and time of the exception in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format and [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time). */
    startDate?: string;
    /** End date and time of the exception in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format and [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time). */
    endDate?: string;
    /**
     * Whether the business is closed (or the service is not available) during the exception.
     *
     * Default: `true`.
     */
    isClosed?: boolean;
    /** Additional info about the exception. For example, "We close earlier on New Year's Eve." */
    comment?: string;
}
export interface Multilingual {
    /** Supported languages list. */
    supportedLanguages?: SupportedLanguage[];
    /** Whether to redirect to user language. */
    autoRedirect?: boolean;
}
export interface SupportedLanguage {
    /** Two-letter language code in [ISO 639-1 alpha-2](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format. */
    languageCode?: string;
    /** Locale. */
    locale?: Locale;
    /** Whether the supported language is the primary language for the site. */
    isPrimary?: boolean;
    /** Language icon. */
    countryCode?: string;
    /** How the language will be resolved. For internal use. */
    resolutionMethod?: ResolutionMethod;
}
export interface ConsentPolicy {
    /** Whether the site uses cookies that are essential to site operation. Always `true`. */
    essential?: boolean | null;
    /** Whether the site uses cookies that affect site performance and other functional measurements. */
    functional?: boolean | null;
    /** Whether the site uses cookies that collect analytics about how the site is used (in order to improve it). */
    analytics?: boolean | null;
    /** Whether the site uses cookies that collect information allowing better customization of the experience for a current visitor. */
    advertising?: boolean | null;
    /** CCPA compliance flag. */
    dataToThirdParty?: boolean | null;
}
/** A single mapping from the MetaSite ID to a particular service. */
export interface Translation {
    /** The service type. */
    serviceType?: string;
    /** The application definition ID; this only applies to services of type ThirdPartyApps. */
    appDefId?: string;
    /** The instance ID of the service. */
    instanceId?: string;
}
export interface ChangeContext extends ChangeContextPayloadOneOf {
    /** Properties were updated. */
    propertiesChange?: PropertiesChange;
    /** Default properties were created on site creation. */
    siteCreated?: SiteCreated;
    /** Properties were cloned on site cloning. */
    siteCloned?: SiteCloned;
}
/** @oneof */
export interface ChangeContextPayloadOneOf {
    /** Properties were updated. */
    propertiesChange?: PropertiesChange;
    /** Default properties were created on site creation. */
    siteCreated?: SiteCreated;
    /** Properties were cloned on site cloning. */
    siteCloned?: SiteCloned;
}
export interface PropertiesChange {
}
export interface SiteCreated {
    /** Origin template site id. */
    originTemplateId?: string | null;
}
export interface SiteCloned {
    /** Origin site id. */
    originMetaSiteId?: string;
}
export interface Empty {
}
export interface UrlInvalidationNotification {
    /** Blog instance id. */
    blogInstanceId?: string | null;
    /** Meta site id. */
    metaSiteId?: string | null;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
    /** Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity */
    restoreInfo?: RestoreInfo;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
interface SiteSupportedLanguageNonNullableFields {
    languageCode: string;
    status: LocaleStatus;
    flag: Flag;
    resolutionMethod: ResolutionMethod;
}
interface PageInfoNonNullableFields {
    title: string;
    pageId: string;
    hidden: boolean;
    path: string;
    url: string;
    isSmProtected: boolean;
    isDynamic: boolean;
    platformApps: string[];
}
interface PagesDataNonNullableFields {
    blogPage?: PageInfoNonNullableFields;
    postPage?: PageInfoNonNullableFields;
}
interface BlogCacheNonNullableFields {
    siteSupportedLanguages: SiteSupportedLanguageNonNullableFields[];
    pagesData?: PagesDataNonNullableFields;
}
export interface GetBlogCacheResponseNonNullableFields {
    blogCache?: BlogCacheNonNullableFields;
}
export {};
