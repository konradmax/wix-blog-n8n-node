import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixBlogV3Tag from './blog-v3-tag-tags.http.js';
// @ts-ignore
import { transformRESTPageURLToSDKPageURL } from '@wix/sdk-runtime/transformations/page-url';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var Field;
(function (Field) {
    Field["UNKNOWN"] = "UNKNOWN";
    /** Includes Tag URL when present. */
    Field["URL"] = "URL";
})(Field || (Field = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a new tag with the provided label if a tag with the same label doesn't already exist.
 * @param label - Tag label. The label for each tag in a blog must be unique.
 * @public
 * @requiredField label
 * @permissionId BLOG.CREATE-TAG
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.TagService.CreateTag
 */
export async function createTag(label, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        label: label,
        language: options?.language,
        slug: options?.slug,
        fieldsets: options?.fieldsets,
    });
    const reqOpts = ambassadorWixBlogV3Tag.createTag(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLToSDKPageURL,
                paths: [{ path: 'tag.url' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                label: '$[0]',
                language: '$[1].language',
                slug: '$[1].slug',
                fieldsets: '$[1].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['label', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Gets a tag by the specified label.
 *
 * The `getTagByLabel()` function returns a Promise that resolves to a tag whose label matches the specified label.
 * @param label - Tag label.
 * @public
 * @requiredField label
 * @param options - Options specifying which additional fields to return.
 * @permissionId BLOG.READ_TAG
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.npm.communities.platformized.blog.TagService.GetTagByLabel
 */
export async function getTagByLabel(label, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        label: label,
        language: options?.language,
        fieldsets: options?.fieldsets,
    });
    const reqOpts = ambassadorWixBlogV3Tag.getTagByLabel(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLToSDKPageURL,
                paths: [{ path: 'tag.url' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                label: '$[0]',
                language: '$[1].language',
                fieldsets: '$[1].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['label', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Gets a tag by the specified ID.
 *
 *
 * The `getTag()` function returns a Promise that resolves to a tag whose ID matches the specified ID.
 * @param tagId - Tag ID.
 * @public
 * @requiredField tagId
 * @param options - Options specifying which additional fields to return.
 * @permissionId BLOG.READ_TAG
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Tag info.
 * @fqn com.wixpress.npm.communities.platformized.blog.TagService.GetTag
 */
export async function getTag(tagId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        tagId: tagId,
        fieldsets: options?.fieldsets,
    });
    const reqOpts = ambassadorWixBlogV3Tag.getTag(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLToSDKPageURL,
                paths: [{ path: 'tag.url' }],
            },
        ]))?.tag;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                tagId: '$[0]',
                fieldsets: '$[1].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['tagId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Gets a tag by the specified slug.
 *
 *
 * The `getTagBySlug()` function returns a Promise that resolves to a tag whose slug matches the specified slug.
 *
 * The `slug` is the end of a tag's URL that refers to a specific tag. For example, if a tag's URL is `https://example.com/blog/tag/{my-tag-slug}`, the slug is `my-tag-slug`. The slug is case-sensitive and derived from the tag's `label`.
 * @param slug - Slug of the tag to retrieve.
 * @public
 * @requiredField slug
 * @param options - Options specifying which additional fields to return.
 * @permissionId BLOG.READ_TAG
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.npm.communities.platformized.blog.TagService.GetTagBySlug
 */
export async function getTagBySlug(slug, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        slug: slug,
        fieldsets: options?.fieldsets,
        language: options?.language,
    });
    const reqOpts = ambassadorWixBlogV3Tag.getTagBySlug(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLToSDKPageURL,
                paths: [{ path: 'tag.url' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                slug: '$[0]',
                fieldsets: '$[1].fieldsets',
                language: '$[1].language',
            },
            singleArgumentUnchanged: false,
        }, ['slug', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a query to retrieve a list of tags.
 *
 *
 * The `queryTags()` function builds a query to retrieve a list of up to 4,000 tags per language, and returns a [`TagsQueryBuilder`](https://www.wix.com/velo/reference/wix-blog-backend/tags/tagsquerybuilder) object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the [`find()`](https://www.wix.com/velo/reference/wix-blog-backend/tags/tagsquerybuilder/find) function.
 *
 * You can refine the query by chaining `TagsQueryBuilder` functions onto the query. `TagsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTags()` returns.
 *
 * `queryTags()` runs with these `TagsQueryBuilder` defaults that can be overridden:
 * - [`limit(50)`](https://www.wix.com/velo/reference/wix-blog-backend/tags/tagsquerybuilder/limit)
 * - [`ascending('_id')`](https://www.wix.com/velo/reference/wix-blog-backend/tags/tagsquerybuilder/ascending)
 *
 * The following `TagQueryBuilder` functions are supported for `queryTags()`. For a full description of the Tags object, see the object returned for the [`items`](https://www.wix.com/velo/reference/wix-blog-backend/tags/tagsqueryresult/items) property in [`TagsQueryResult`](https://www.wix.com/velo/reference/wix-blog-backend/tags/tagsqueryresult).
 * @public
 * @documentationMaturity preview
 * @param options - Options specifying which fields to return.
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @permissionId BLOG.READ_TAG
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.npm.communities.platformized.blog.TagService.QueryTags
 */
export function queryTags(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixBlogV3Tag.queryTags({
                ...payload,
                ...(options ?? {}),
            });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(transformPaths(data, [
                {
                    transformFn: transformRESTPageURLToSDKPageURL,
                    paths: [{ path: 'tags.url' }],
                },
            ]));
            return {
                items: transformedData?.tags,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'OFFSET',
        transformationPaths: {},
    });
}
/**
 * Deletes a tag. Deleting a tag removes that tag from all blog posts that contain it.
 * @param tagId - Tag ID.
 * @public
 * @requiredField tagId
 * @permissionId BLOG.DELETE_TAG
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.TagService.DeleteTag
 */
export async function deleteTag(tagId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ tagId: tagId });
    const reqOpts = ambassadorWixBlogV3Tag.deleteTag(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { tagId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['tagId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=blog-v3-tag-tags.universal.js.map