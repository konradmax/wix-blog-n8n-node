import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixBlogV3Post from './blog-v3-post-posts.http.js';
// @ts-ignore
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTVideoV2ToSDKVideoV2 } from '@wix/sdk-runtime/transformations/video-v2';
import { transformRESTVideoToSDKVideo } from '@wix/sdk-runtime/transformations/video';
import { transformRESTPageURLToSDKPageURL } from '@wix/sdk-runtime/transformations/page-url';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var NodeType;
(function (NodeType) {
    NodeType["PARAGRAPH"] = "PARAGRAPH";
    NodeType["TEXT"] = "TEXT";
    NodeType["HEADING"] = "HEADING";
    NodeType["BULLETED_LIST"] = "BULLETED_LIST";
    NodeType["ORDERED_LIST"] = "ORDERED_LIST";
    NodeType["LIST_ITEM"] = "LIST_ITEM";
    NodeType["BLOCKQUOTE"] = "BLOCKQUOTE";
    NodeType["CODE_BLOCK"] = "CODE_BLOCK";
    NodeType["VIDEO"] = "VIDEO";
    NodeType["DIVIDER"] = "DIVIDER";
    NodeType["FILE"] = "FILE";
    NodeType["GALLERY"] = "GALLERY";
    NodeType["GIF"] = "GIF";
    NodeType["HTML"] = "HTML";
    NodeType["IMAGE"] = "IMAGE";
    NodeType["LINK_PREVIEW"] = "LINK_PREVIEW";
    /** @deprecated */
    NodeType["MAP"] = "MAP";
    NodeType["POLL"] = "POLL";
    NodeType["APP_EMBED"] = "APP_EMBED";
    NodeType["BUTTON"] = "BUTTON";
    NodeType["COLLAPSIBLE_LIST"] = "COLLAPSIBLE_LIST";
    NodeType["TABLE"] = "TABLE";
    NodeType["EMBED"] = "EMBED";
    NodeType["COLLAPSIBLE_ITEM"] = "COLLAPSIBLE_ITEM";
    NodeType["COLLAPSIBLE_ITEM_TITLE"] = "COLLAPSIBLE_ITEM_TITLE";
    NodeType["COLLAPSIBLE_ITEM_BODY"] = "COLLAPSIBLE_ITEM_BODY";
    NodeType["TABLE_CELL"] = "TABLE_CELL";
    NodeType["TABLE_ROW"] = "TABLE_ROW";
    NodeType["EXTERNAL"] = "EXTERNAL";
    NodeType["AUDIO"] = "AUDIO";
    NodeType["CAPTION"] = "CAPTION";
    NodeType["LAYOUT"] = "LAYOUT";
    NodeType["LAYOUT_CELL"] = "LAYOUT_CELL";
})(NodeType || (NodeType = {}));
export var WidthType;
(function (WidthType) {
    /** Width matches the content width */
    WidthType["CONTENT"] = "CONTENT";
    /** Small Width */
    WidthType["SMALL"] = "SMALL";
    /** Width will match the original asset width */
    WidthType["ORIGINAL"] = "ORIGINAL";
    /** coast-to-coast display */
    WidthType["FULL_WIDTH"] = "FULL_WIDTH";
})(WidthType || (WidthType = {}));
export var PluginContainerDataAlignment;
(function (PluginContainerDataAlignment) {
    /** Center Alignment */
    PluginContainerDataAlignment["CENTER"] = "CENTER";
    /** Left Alignment */
    PluginContainerDataAlignment["LEFT"] = "LEFT";
    /** Right Alignment */
    PluginContainerDataAlignment["RIGHT"] = "RIGHT";
})(PluginContainerDataAlignment || (PluginContainerDataAlignment = {}));
export var Type;
(function (Type) {
    /** Regular link button */
    Type["LINK"] = "LINK";
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    Type["ACTION"] = "ACTION";
})(Type || (Type = {}));
export var Target;
(function (Target) {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    Target["SELF"] = "SELF";
    /** Opens the linked document in a new window or tab */
    Target["BLANK"] = "BLANK";
    /** Opens the linked document in the parent frame */
    Target["PARENT"] = "PARENT";
    /** Opens the linked document in the full body of the window */
    Target["TOP"] = "TOP";
})(Target || (Target = {}));
export var TextAlignment;
(function (TextAlignment) {
    /** browser default, eqivalent to `initial` */
    TextAlignment["AUTO"] = "AUTO";
    /** Left align */
    TextAlignment["LEFT"] = "LEFT";
    /** Right align */
    TextAlignment["RIGHT"] = "RIGHT";
    /** Center align */
    TextAlignment["CENTER"] = "CENTER";
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    TextAlignment["JUSTIFY"] = "JUSTIFY";
})(TextAlignment || (TextAlignment = {}));
export var LineStyle;
(function (LineStyle) {
    /** Single Line */
    LineStyle["SINGLE"] = "SINGLE";
    /** Double Line */
    LineStyle["DOUBLE"] = "DOUBLE";
    /** Dashed Line */
    LineStyle["DASHED"] = "DASHED";
    /** Dotted Line */
    LineStyle["DOTTED"] = "DOTTED";
})(LineStyle || (LineStyle = {}));
export var Width;
(function (Width) {
    /** Large line */
    Width["LARGE"] = "LARGE";
    /** Medium line */
    Width["MEDIUM"] = "MEDIUM";
    /** Small line */
    Width["SMALL"] = "SMALL";
})(Width || (Width = {}));
export var Alignment;
(function (Alignment) {
    /** Center alignment */
    Alignment["CENTER"] = "CENTER";
    /** Left alignment */
    Alignment["LEFT"] = "LEFT";
    /** Right alignment */
    Alignment["RIGHT"] = "RIGHT";
})(Alignment || (Alignment = {}));
export var ViewMode;
(function (ViewMode) {
    /** No PDF view */
    ViewMode["NONE"] = "NONE";
    /** Full PDF view */
    ViewMode["FULL"] = "FULL";
    /** Mini PDF view */
    ViewMode["MINI"] = "MINI";
})(ViewMode || (ViewMode = {}));
export var LayoutType;
(function (LayoutType) {
    /** Collage type */
    LayoutType["COLLAGE"] = "COLLAGE";
    /** Masonry type */
    LayoutType["MASONRY"] = "MASONRY";
    /** Grid type */
    LayoutType["GRID"] = "GRID";
    /** Thumbnail type */
    LayoutType["THUMBNAIL"] = "THUMBNAIL";
    /** Slider type */
    LayoutType["SLIDER"] = "SLIDER";
    /** Slideshow type */
    LayoutType["SLIDESHOW"] = "SLIDESHOW";
    /** Panorama type */
    LayoutType["PANORAMA"] = "PANORAMA";
    /** Column type */
    LayoutType["COLUMN"] = "COLUMN";
    /** Magic type */
    LayoutType["MAGIC"] = "MAGIC";
    /** Fullsize images type */
    LayoutType["FULLSIZE"] = "FULLSIZE";
})(LayoutType || (LayoutType = {}));
export var Orientation;
(function (Orientation) {
    /** Rows Orientation */
    Orientation["ROWS"] = "ROWS";
    /** Columns Orientation */
    Orientation["COLUMNS"] = "COLUMNS";
})(Orientation || (Orientation = {}));
export var Crop;
(function (Crop) {
    /** Crop to fill */
    Crop["FILL"] = "FILL";
    /** Crop to fit */
    Crop["FIT"] = "FIT";
})(Crop || (Crop = {}));
export var ThumbnailsAlignment;
(function (ThumbnailsAlignment) {
    /** Top alignment */
    ThumbnailsAlignment["TOP"] = "TOP";
    /** Right alignment */
    ThumbnailsAlignment["RIGHT"] = "RIGHT";
    /** Bottom alignment */
    ThumbnailsAlignment["BOTTOM"] = "BOTTOM";
    /** Left alignment */
    ThumbnailsAlignment["LEFT"] = "LEFT";
    /** No thumbnail */
    ThumbnailsAlignment["NONE"] = "NONE";
})(ThumbnailsAlignment || (ThumbnailsAlignment = {}));
export var GIFType;
(function (GIFType) {
    GIFType["NORMAL"] = "NORMAL";
    GIFType["STICKER"] = "STICKER";
})(GIFType || (GIFType = {}));
export var Source;
(function (Source) {
    Source["HTML"] = "HTML";
    Source["ADSENSE"] = "ADSENSE";
})(Source || (Source = {}));
export var MapType;
(function (MapType) {
    /** Roadmap map type */
    MapType["ROADMAP"] = "ROADMAP";
    /** Satellite map type */
    MapType["SATELITE"] = "SATELITE";
    /** Hybrid map type */
    MapType["HYBRID"] = "HYBRID";
    /** Terrain map type */
    MapType["TERRAIN"] = "TERRAIN";
})(MapType || (MapType = {}));
export var ViewRole;
(function (ViewRole) {
    /** Only Poll creator can view the results */
    ViewRole["CREATOR"] = "CREATOR";
    /** Anyone who voted can see the results */
    ViewRole["VOTERS"] = "VOTERS";
    /** Anyone can see the results, even if one didn't vote */
    ViewRole["EVERYONE"] = "EVERYONE";
})(ViewRole || (ViewRole = {}));
export var VoteRole;
(function (VoteRole) {
    /** Logged in member */
    VoteRole["SITE_MEMBERS"] = "SITE_MEMBERS";
    /** Anyone */
    VoteRole["ALL"] = "ALL";
})(VoteRole || (VoteRole = {}));
export var PollLayoutType;
(function (PollLayoutType) {
    /** List */
    PollLayoutType["LIST"] = "LIST";
    /** Grid */
    PollLayoutType["GRID"] = "GRID";
})(PollLayoutType || (PollLayoutType = {}));
export var PollLayoutDirection;
(function (PollLayoutDirection) {
    /** Left-to-right */
    PollLayoutDirection["LTR"] = "LTR";
    /** Right-to-left */
    PollLayoutDirection["RTL"] = "RTL";
})(PollLayoutDirection || (PollLayoutDirection = {}));
export var BackgroundType;
(function (BackgroundType) {
    /** Color background type */
    BackgroundType["COLOR"] = "COLOR";
    /** Image background type */
    BackgroundType["IMAGE"] = "IMAGE";
    /** Gradiant background type */
    BackgroundType["GRADIENT"] = "GRADIENT";
})(BackgroundType || (BackgroundType = {}));
export var DecorationType;
(function (DecorationType) {
    DecorationType["BOLD"] = "BOLD";
    DecorationType["ITALIC"] = "ITALIC";
    DecorationType["UNDERLINE"] = "UNDERLINE";
    DecorationType["SPOILER"] = "SPOILER";
    DecorationType["ANCHOR"] = "ANCHOR";
    DecorationType["MENTION"] = "MENTION";
    DecorationType["LINK"] = "LINK";
    DecorationType["COLOR"] = "COLOR";
    DecorationType["FONT_SIZE"] = "FONT_SIZE";
    DecorationType["EXTERNAL"] = "EXTERNAL";
})(DecorationType || (DecorationType = {}));
export var FontType;
(function (FontType) {
    FontType["PX"] = "PX";
    FontType["EM"] = "EM";
})(FontType || (FontType = {}));
export var AppType;
(function (AppType) {
    AppType["PRODUCT"] = "PRODUCT";
    AppType["EVENT"] = "EVENT";
    AppType["BOOKING"] = "BOOKING";
})(AppType || (AppType = {}));
export var InitialExpandedItems;
(function (InitialExpandedItems) {
    /** First item will be expended initally */
    InitialExpandedItems["FIRST"] = "FIRST";
    /** All items will expended initally */
    InitialExpandedItems["ALL"] = "ALL";
    /** All items collapsed initally */
    InitialExpandedItems["NONE"] = "NONE";
})(InitialExpandedItems || (InitialExpandedItems = {}));
export var Direction;
(function (Direction) {
    /** Left-to-right */
    Direction["LTR"] = "LTR";
    /** Right-to-left */
    Direction["RTL"] = "RTL";
})(Direction || (Direction = {}));
export var VerticalAlignment;
(function (VerticalAlignment) {
    /** Top alignment */
    VerticalAlignment["TOP"] = "TOP";
    /** Middle alignment */
    VerticalAlignment["MIDDLE"] = "MIDDLE";
    /** Bottom alignment */
    VerticalAlignment["BOTTOM"] = "BOTTOM";
})(VerticalAlignment || (VerticalAlignment = {}));
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 */
export var NullValue;
(function (NullValue) {
    /** Null value. */
    NullValue["NULL_VALUE"] = "NULL_VALUE";
})(NullValue || (NullValue = {}));
export var ModerationStatusStatus;
(function (ModerationStatusStatus) {
    ModerationStatusStatus["UNKNOWN"] = "UNKNOWN";
    ModerationStatusStatus["APPROVED"] = "APPROVED";
    ModerationStatusStatus["REJECTED"] = "REJECTED";
})(ModerationStatusStatus || (ModerationStatusStatus = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
export var GetPostsSort;
(function (GetPostsSort) {
    /** Ordered by `firstPublishedDate` in descending order with pinned posts first. */
    GetPostsSort["FEED"] = "FEED";
    /** Ordered by `firstPublishedDate` in ascending order. */
    GetPostsSort["PUBLISHED_DATE_ASC"] = "PUBLISHED_DATE_ASC";
    /** Ordered by `firstPublishedDate` in descending order. */
    GetPostsSort["PUBLISHED_DATE_DESC"] = "PUBLISHED_DATE_DESC";
    /** Ordered by total number of views in descending order. */
    GetPostsSort["VIEW_COUNT"] = "VIEW_COUNT";
    /** Ordered by total number of likes in descending order. */
    GetPostsSort["LIKE_COUNT"] = "LIKE_COUNT";
    /** Ordered by `title` in ascening order. */
    GetPostsSort["TITLE_ASC"] = "TITLE_ASC";
    /** Ordered by `title` in descending order. */
    GetPostsSort["TITLE_DESC"] = "TITLE_DESC";
})(GetPostsSort || (GetPostsSort = {}));
export var PostFieldField;
(function (PostFieldField) {
    PostFieldField["UNKNOWN"] = "UNKNOWN";
    /** Includes Post url when present. */
    PostFieldField["URL"] = "URL";
    /** Includes Post content text string when present. */
    PostFieldField["CONTENT_TEXT"] = "CONTENT_TEXT";
    /** Includes Post metrics when present. */
    PostFieldField["METRICS"] = "METRICS";
    /** Includes SEO data. */
    PostFieldField["SEO"] = "SEO";
    /** Includes post owner's contact ID */
    PostFieldField["CONTACT_ID"] = "CONTACT_ID";
    /** Includes post rich content. */
    PostFieldField["RICH_CONTENT"] = "RICH_CONTENT";
    /** Includes post reference id field. */
    PostFieldField["REFERENCE_ID"] = "REFERENCE_ID";
})(PostFieldField || (PostFieldField = {}));
export var GetPostTemplatesSort;
(function (GetPostTemplatesSort) {
    /** Sort by ascending publishing date. */
    GetPostTemplatesSort["PUBLISHED_DATE_ASC"] = "PUBLISHED_DATE_ASC";
    /** Sort by descending publishing date. */
    GetPostTemplatesSort["PUBLISHED_DATE_DESC"] = "PUBLISHED_DATE_DESC";
})(GetPostTemplatesSort || (GetPostTemplatesSort = {}));
export var Origin;
(function (Origin) {
    Origin["UNKNOWN"] = "UNKNOWN";
    /** Changed by admin */
    Origin["ADMIN"] = "ADMIN";
    /** Categories were changed */
    Origin["ADD_CATEGORIES"] = "ADD_CATEGORIES";
    /** Saved automatically */
    Origin["AUTO_SAVE"] = "AUTO_SAVE";
    /** Copied from template */
    Origin["COPY_TEMPLATE"] = "COPY_TEMPLATE";
    /** Imported */
    Origin["IMPORT"] = "IMPORT";
    /** Imported in bulk */
    Origin["IMPORT_BULK"] = "IMPORT_BULK";
    /** Imported with html import */
    Origin["IMPORT_HTML"] = "IMPORT_HTML";
    /** Patch import */
    Origin["IMPORT_PATCH"] = "IMPORT_PATCH";
    /** Changed language */
    Origin["LANGUAGE_CHANGE"] = "LANGUAGE_CHANGE";
    /** Saved manually */
    Origin["MANUAL_SAVE"] = "MANUAL_SAVE";
    /** Affected by migration */
    Origin["MIGRATION"] = "MIGRATION";
    /** Affected by moderation */
    Origin["MODERATION"] = "MODERATION";
    /** Moved to trash */
    Origin["MOVE_TO_TRASH"] = "MOVE_TO_TRASH";
    /** Pricing plans were changed */
    Origin["PRICING_PLANS_CHANGE"] = "PRICING_PLANS_CHANGE";
    /** Was provisioned */
    Origin["PROVISION"] = "PROVISION";
    /** Was published */
    Origin["PUBLISH"] = "PUBLISH";
    /** Owner was reassigned */
    Origin["REASSIGN_OWNER"] = "REASSIGN_OWNER";
    /** Was reblogged */
    Origin["REBLOG"] = "REBLOG";
    /** Was restored */
    Origin["RESTORE"] = "RESTORE";
    /** Reverted to draft */
    Origin["REVERT_TO_DRAFT"] = "REVERT_TO_DRAFT";
    /** Was translated */
    Origin["TRANSLATION"] = "TRANSLATION";
    /** Was unpublished */
    Origin["UNPUBLISH"] = "UNPUBLISH";
    /** Was unscheduled */
    Origin["UNSCHEDULE"] = "UNSCHEDULE";
    /** New edit session started which updated editing_session_id id */
    Origin["NEW_EDIT_SESSION"] = "NEW_EDIT_SESSION";
    /** Was scheduled by Later */
    Origin["SCHEDULING_SERVICE_SCHEDULE"] = "SCHEDULING_SERVICE_SCHEDULE";
    /** Was unscheduled by Later */
    Origin["SCHEDULING_SERVICE_UNSCHEDULE"] = "SCHEDULING_SERVICE_UNSCHEDULE";
    /** Was published by Later */
    Origin["SCHEDULING_SERVICE_PUBLISH"] = "SCHEDULING_SERVICE_PUBLISH";
    /** Was scheduled */
    Origin["SCHEDULE"] = "SCHEDULE";
    /** Was removed from moderation */
    Origin["REMOVE_FROM_MODERATION"] = "REMOVE_FROM_MODERATION";
    /** Was rejected from moderation */
    Origin["REJECT_FROM_MODERATION"] = "REJECT_FROM_MODERATION";
    /** Was approved in moderation */
    Origin["APPROVE_IN_MODERATION"] = "APPROVE_IN_MODERATION";
    /** Tag was deleted */
    Origin["DELETE_TAG"] = "DELETE_TAG";
    /** Post was pinned */
    Origin["PIN"] = "PIN";
    /** Post was unpinned */
    Origin["UNPIN"] = "UNPIN";
    /** Saved automatically by AI tool. */
    Origin["AI_AUTO_SAVE"] = "AI_AUTO_SAVE";
})(Origin || (Origin = {}));
export var Status;
(function (Status) {
    Status["UNKNOWN"] = "UNKNOWN";
    /** Status indicating the draft post is published. */
    Status["PUBLISHED"] = "PUBLISHED";
    /** Status indicating the draft post is unpublished. */
    Status["UNPUBLISHED"] = "UNPUBLISHED";
    /** Status indicating the draft post is scheduled for publication. */
    Status["SCHEDULED"] = "SCHEDULED";
    /** Status indicating the draft post is deleted. */
    Status["DELETED"] = "DELETED";
    /**
     * Deprecated. Use `IN_REVIEW` instead. Status indicating the draft post is in review.
     * Target removal date 2024-06-30
     * Reserved for internal use.
     */
    Status["IN_MODERATION"] = "IN_MODERATION";
    /** Status indicating the draft post is in review. */
    Status["IN_REVIEW"] = "IN_REVIEW";
})(Status || (Status = {}));
export var Field;
(function (Field) {
    /** Undefined field. */
    Field["UNKNOWN"] = "UNKNOWN";
    /** Total comments field. */
    Field["TOTAL_COMMENTS"] = "TOTAL_COMMENTS";
    /** Like count field. */
    Field["LIKE_COUNT"] = "LIKE_COUNT";
    /** View count field. */
    Field["VIEW_COUNT"] = "VIEW_COUNT";
    /** Rating count field. */
    Field["RATING_COUNT"] = "RATING_COUNT";
})(Field || (Field = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var QueryPublicationsCountStatsRequestOrder;
(function (QueryPublicationsCountStatsRequestOrder) {
    QueryPublicationsCountStatsRequestOrder["UNKNOWN"] = "UNKNOWN";
    QueryPublicationsCountStatsRequestOrder["OLDEST"] = "OLDEST";
    QueryPublicationsCountStatsRequestOrder["NEWEST"] = "NEWEST";
})(QueryPublicationsCountStatsRequestOrder || (QueryPublicationsCountStatsRequestOrder = {}));
export var Order;
(function (Order) {
    Order["UNKNOWN"] = "UNKNOWN";
    Order["OLDEST"] = "OLDEST";
    Order["NEWEST"] = "NEWEST";
})(Order || (Order = {}));
/**
 * Gets a post by the specified ID.
 *
 *
 * The `getPost()` function returns a Promise that resolves to a post whose ID matches the given ID.
 *
 * @param postId - Post ID.
 * @public
 * @requiredField postId
 * @param options - Options specifying which fields to return.
 * @permissionId BLOG.READ-PUBLICATION
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - The requested post.
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.PostService.GetPost
 */
export async function getPost(postId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        postId: postId,
        fieldsToInclude: options?.fieldsToInclude,
        fieldsets: options?.fieldsets,
    }, []);
    const reqOpts = ambassadorWixBlogV3Post.getPost(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLToSDKPageURL,
                paths: [{ path: 'post.url' }, { path: 'post.translations.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'post.heroImage' },
                    { path: 'post.coverMedia.image' },
                    { path: 'post.media.wixMedia.image' },
                ],
            },
            {
                transformFn: transformRESTVideoToSDKVideo,
                paths: [{ path: 'post.coverMedia.video' }],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'post.media.wixMedia.videoV2' }],
            },
        ]), ['post.rich_content']);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                postId: '$[0]',
                fieldsToInclude: '$[1].fieldsToInclude',
                fieldsets: '$[1].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['postId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Gets a post by the provided slug.
 *
 *
 * The `getPostBySlug()` function returns a Promise that resolves to a post whose slug matches the given slug.
 *
 * The `slug` is the end of a post's URL that refers to a specific post. For example, if a post's URL is `https:/example.com/blog/post/my-post-slug`, the slug is `my-post-slug`. The slug is case-sensitive, and is generally derived from the post title, unless specified otherwise.
 * @public
 * @requiredField slug
 * @param options - Options specifying which fields to return.
 * @param slug - Slug of the post to retrieve.
 *
 * The end of a post's URL, for example, `https:/example.com/blog/post/my-post-slug`. Case sensitive and generally based on the post title if not specified.
 * @permissionId BLOG.READ-PUBLICATION
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - The requested post.
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.PostService.GetPostBySlug
 */
export async function getPostBySlug(slug, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        slug: slug,
        fieldsToInclude: options?.fieldsToInclude,
        fieldsets: options?.fieldsets,
    }, []);
    const reqOpts = ambassadorWixBlogV3Post.getPostBySlug(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLToSDKPageURL,
                paths: [{ path: 'post.url' }, { path: 'post.translations.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'post.heroImage' },
                    { path: 'post.coverMedia.image' },
                    { path: 'post.media.wixMedia.image' },
                ],
            },
            {
                transformFn: transformRESTVideoToSDKVideo,
                paths: [{ path: 'post.coverMedia.video' }],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'post.media.wixMedia.videoV2' }],
            },
        ]), ['post.rich_content']);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                slug: '$[0]',
                fieldsToInclude: '$[1].fieldsToInclude',
                fieldsets: '$[1].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['slug', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of published posts.
 *
 *
 * The `listPosts()` function returns a Promise that resolves to a list of up to 100 published posts.
 *
 * Using the `options` parameter, you can filter your list of posts, set the amount of posts to be returned, and sort your list in a specified order.
 *
 * By default, the list is sorted by `firstPublishedDate` in descending order, and the amount of posts returned is 50.
 * @public
 * @param options - Sort, filter, and paging options.
 * @permissionId BLOG.READ-PUBLICATION
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - List of retrieved posts.
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.PostService.ListPosts
 */
export async function listPosts(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        featured: options?.featured,
        hashtags: options?.hashtags,
        categoryIds: options?.categoryIds,
        tagIds: options?.tagIds,
        sort: options?.sort,
        paging: options?.paging,
        fieldsToInclude: options?.fieldsToInclude,
        language: options?.language,
        memberId: options?.memberId,
        fieldsets: options?.fieldsets,
    }, []);
    const reqOpts = ambassadorWixBlogV3Post.listPosts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLToSDKPageURL,
                paths: [{ path: 'posts.url' }, { path: 'posts.translations.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'posts.heroImage' },
                    { path: 'posts.coverMedia.image' },
                    { path: 'posts.media.wixMedia.image' },
                ],
            },
            {
                transformFn: transformRESTVideoToSDKVideo,
                paths: [{ path: 'posts.coverMedia.video' }],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'posts.media.wixMedia.videoV2' }],
            },
        ]), ['posts.rich_content']);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                featured: '$[0].featured',
                hashtags: '$[0].hashtags',
                categoryIds: '$[0].categoryIds',
                tagIds: '$[0].tagIds',
                sort: '$[0].sort',
                paging: '$[0].paging',
                fieldsToInclude: '$[0].fieldsToInclude',
                language: '$[0].language',
                memberId: '$[0].memberId',
                fieldsets: '$[0].fieldsets',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a query to retrieve a list of posts.
 *
 *
 * The `queryPosts()` function builds a query to retrieve a list of up to 100 posts, and returns a [`PostsQueryBuilder`](https://www.wix.com/velo/reference/wix-blog-backend/posts/postsquerybuilder) object.
 *
 * The returned object contains the query definition which is typically used to run the query using the [`find()`](https://www.wix.com/velo/reference/wix-blog-backend/posts/postsquerybuilder/find) function.
 *
 * You can refine the query by chaining `PostsQueryBuilder` functions onto the query. `PostsQueryBuilder` functions enable you to sort, filter, and control the results that `queryPosts()` returns.
 *
 * `queryPosts()` runs with these `PostsQueryBuilder` defaults that can be overridden:
 * + [`limit(50)`](https://www.wix.com/velo/reference/wix-blog-backend/posts/postsquerybuilder/limit)
 * + [`descending('firstPublishedDate')`](https://www.wix.com/velo/reference/wix-blog-backend/posts/postsquerybuilder/descending)
 *
 * Note that the default limit is `'50'`, but the max limit is `'100'`.
 *
 * To learn how to query posts, refer to the table below.
 *
 * The following `PostsQueryBuilder` functions are supported for the `queryPosts()` function. For a full description of the Posts object, see the object returned for the [`items`](https://www.wix.com/velo/reference/wix-blog-backend/posts/postsqueryresult/items) property in [`PostsQueryResult`](https://www.wix.com/velo/reference/wix-blog-backend/posts/postsqueryresult).
 * @public
 * @param options - Options specifying which fields to return.
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @permissionId BLOG.READ-PUBLICATION
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.PostService.QueryPosts
 */
export function queryPosts(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixBlogV3Post.queryPosts({
                ...payload,
                ...(options ?? {}),
            });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return renameKeysFromSDKRequestToRESTRequest({ ...args?.[1], query: args?.[0] }, []);
        },
        responseTransformer: ({ data }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(transformPaths(data, [
                {
                    transformFn: transformRESTPageURLToSDKPageURL,
                    paths: [{ path: 'posts.url' }, { path: 'posts.translations.url' }],
                },
                {
                    transformFn: transformRESTImageToSDKImage,
                    paths: [
                        { path: 'posts.heroImage' },
                        { path: 'posts.coverMedia.image' },
                        { path: 'posts.media.wixMedia.image' },
                    ],
                },
                {
                    transformFn: transformRESTVideoToSDKVideo,
                    paths: [{ path: 'posts.coverMedia.video' }],
                },
                {
                    transformFn: transformRESTVideoV2ToSDKVideoV2,
                    paths: [{ path: 'posts.media.wixMedia.videoV2' }],
                },
            ]), ['posts.rich_content']);
            return {
                items: transformedData?.posts,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Gets a specified post's metrics.
 *
 *
 * The `getPostMetrics()` function returns a Promise that resolves to the specified post's metrics.
 *
 * A post's metrics include the comments, likes, and views the post receives.
 * @param postId - Post ID.
 * @public
 * @requiredField postId
 * @permissionId BLOG.READ-PUBLICATION
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Post metrics.
 * @fqn com.wixpress.npm.communities.platformized.blog.v3.PostService.GetPostMetrics
 */
export async function getPostMetrics(postId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ postId: postId }, []);
    const reqOpts = ambassadorWixBlogV3Post.getPostMetrics(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data, []);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { postId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['postId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves the number of published posts per month within a specified time range.
 *
 *
 * The `queryPostCountStats()` function returns a Promise that resolves to the number of posts per month within the specified time range.
 *
 * You can set the time range using the `rangeStart` and `months` properties. The time range always starts on the 1st day of the month set in `rangeStart` and includes the number of `months` following `rangeStart`. For example, if `rangeStart` is set to `'2022-03-13'` and `months` is set to `4`, the time range will be from `'2022-03-01'` until `'2022-06-30'`. The time range ends on the last day of the month.
 *
 * >**Note:** If there are no published posts in a specific month, that month is not included in the response. For example, let's say a blog has `0` posts dated in February 2022. If `rangeStart` is set to `'2022-01-01'` and `months` is set to `3`, the response includes `postCount` values for January and March, but not February.
 * @public
 * @documentationMaturity preview
 * @param options - Options specifying time frame, sort, and filter.
 * @permissionId BLOG.READ-PUBLICATION
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Post count stats.
 * @fqn com.wixpress.npm.communities.platformized.blog.BlogStatsService.QueryPostCountStats
 */
export async function queryPostCountStats(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        rangeStart: options?.rangeStart,
        rangeEnd: options?.rangeEnd,
        order: options?.order,
        months: options?.months,
        language: options?.language,
        timeZone: options?.timeZone,
    }, []);
    const reqOpts = ambassadorWixBlogV3Post.queryPostCountStats(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data, []);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                rangeStart: '$[0].rangeStart',
                rangeEnd: '$[0].rangeEnd',
                order: '$[0].order',
                months: '$[0].months',
                language: '$[0].language',
                timeZone: '$[0].timeZone',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Gets the total amount of published posts on the blog.
 *
 *
 * The `getTotalPosts()` function returns a Promise that resolves to the total amount of published posts on your blog's site.
 *
 *
 * You can use the `language` option to filter posts for a specified language.
 * @public
 * @documentationMaturity preview
 * @param options - Language Options.
 * @permissionId BLOG.READ-PUBLICATION
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Total number of posts.
 * @fqn com.wixpress.npm.communities.platformized.blog.BlogStatsService.GetTotalPosts
 */
export async function getTotalPosts(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ language: options?.language }, []);
    const reqOpts = ambassadorWixBlogV3Post.getTotalPosts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data, []);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { language: '$[0].language' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=blog-v3-post-posts.universal.js.map